[
  {
    "title": "Web Animation Easing & Timing",
    "description": "Create effective web animations using appropriate duration and easing functions for different UI interactions",
    "content": "# Web Animation Easing & Timing Cheatsheet\n\n## Duration Guidelines\n\n| Animation Type | Recommended Duration | Notes |\n|----------------|---------------------|-------|\n| Hover transitions | 150ms | Faster because user is already focused on element |\n| Modal/Popover (enter) | 200ms | Combined with appropriate easing |\n| Modal/Popover (exit) | 150ms | Exits are generally faster than entrances |\n| Color/Opacity changes | Shorter durations | Eyes are sensitive to color changes |\n| Large view changes | Up to 1000ms | Longer for significant transformations |\n| Default animation | 200-300ms | Sweet spot based on human reaction time (215ms) |\n\n> **Important**: Keep animations under 700ms in most cases to maintain perceived performance.\n\n## Easing Types & When To Use Them\n\n### `ease-out` 🌟\n- **Best for**: Enter/exit animations, user-initiated interactions\n- **Why**: Starts fast and slows down, giving a feeling of responsiveness\n- **Use cases**: Opening modals, dropdown menus, components appearing\n- **Note**: The most commonly used easing for UI work\n\n### `ease-in-out`\n- **Best for**: Elements moving to new positions or morphing\n- **Why**: Starts slow, speeds up, then slows down - creates natural motion\n- **Use cases**: Elements repositioning on screen, transformations\n- **Note**: Most satisfying curve visually\n\n### `ease-in` ⚠️\n- **Best for**: Avoid in most cases\n- **Why**: Slow start makes interfaces feel sluggish\n- **Use cases**: Sometimes used for exit animations (though ease-out is often better)\n- **Note**: Can make interfaces feel less responsive\n\n### `linear`\n- **Best for**: Continuous animations with no start/end\n- **Why**: Constant speed works for ongoing motion\n- **Use cases**: Loading spinners, marquees, continuous animations\n- **Note**: Avoid for most UI interactions as it feels robotic\n\n### `ease` (Default CSS)\n- **Best for**: Simple hover effects\n- **Why**: Subtle acceleration curve\n- **Use cases**: Color changes, background transitions\n- **Note**: Default timing function in CSS\n\n### Custom Easing\n- **Best for**: When standard curves don't provide enough personality\n- **Why**: Offers precise control over acceleration\n- **Example**: Custom sheet animation for Vaul (mimics iOS)\n- **Note**: Custom easings often have stronger acceleration than built-ins\n\n## When to Animate (and When Not To)\n\n### Do Animate:\n- To add context or explain functionality\n- For state changes that need to be noticed\n- Enter/exit transitions of important elements\n- Where animation enriches information\n\n### Avoid Animating:\n- Frequently used elements (becomes tiring)\n- Keyboard interactions (feels mechanical)\n- Where instant feedback is preferred\n- When animations would slow perceived performance\n\n## Animation Philosophy\n\n1. **Purpose**: Animation should add context, not just decoration\n2. **Frequency**: Consider how often users will see the animation\n3. **Perception**: Duration and easing affect perceived performance\n4. **Balance**: Use expected animations (enter/exit) broadly, special animations sparingly\n\n> \"Animation is rarely delightful on its own; however, when used considerately alongside all the other pieces of the interface, the whole experience becomes delightful.\"",
    "frontmatter": {
      "title": "Web Animation Easing & Timing",
      "provenance": "This is based on two chapters from https://animations.dev/",
      "description": "Create effective web animations using appropriate duration and easing functions for different UI interactions",
      "bump": 6,
      "tags": [
        "lib:react"
      ]
    },
    "tags": [
      "lib:react"
    ],
    "provenance": "This is based on two chapters from https://animations.dev/",
    "createdAt": "2025-02-24T19:49:23+02:00",
    "attributedGitHubUser": "martinklepsch",
    "attributedXUser": null
  },
  {
    "title": "Babashka Scripting",
    "description": "Create babashka scripts to automate command-line tasks, file operations, and HTTP requests",
    "content": "# general tips for writing babashka code\n\n1. When using `p/process` and `p/shell` a variable list of strings is expected at the end. When creating the command using a vector or similar, be sure to use `apply` so that the vector is unwrapped\n\t1. Example: `(apply p/process {} [\"echo\" \"123\"])`\n\n1. When using `fs/glob` to find files for a pattern, do it like this:\n\n   ```clojure\n   (def example-pattern \"some-dir/**/*.clj\")\n\n   (->> (fs/glob \".\" example-pattern)\n        (map fs/file))\n   ```\n   `pattern` is a regular string\n\t   \n2. Some useful flags for file processing scripts\n\t1. `--dry-run` only print actions, don’t execute\n\t2. `--verbose` log additional input\n\t\n3. When creating namespaces and functions using the babashka.cli APIs, it is useful to alias them into your `bb.edn` file so that they can used as a shorter command\n   \n\t    e.g. {:tasks {prune some.ns/prune}} \n\n# babashka.cli\n\nTurn Clojure functions into CLIs!\n\n## Installation\n\nAdd to your `deps.edn` or `bb.edn` `:deps` entry:\n\n```clojure\norg.babashka/cli {:mvn/version \"<latest-version>\"}\n```\n\n## Overview\n\nbabashka.cli provides a simple way to parse command line arguments in Clojure and babashka CLIs:\n\n```clojure\n$ cli command :opt1 v1 :opt2 v2\n# or\n$ cli command --long-opt1 v1 -o v2\n```\n\nKey features:\n- Minimal effort to turn Clojure functions into CLIs\n- Better UX by avoiding EDN quotes on command line\n- Open world assumption - extra arguments don't break functionality\n\n## Basic Usage\n\nHere's a simple example:\n\n```clojure\n#!/usr/bin/env bb\n(require '[babashka.cli :as cli]\n         '[babashka.fs :as fs])\n\n(def cli-spec\n  {:spec\n   {:num {:coerce :long\n          :desc \"Number of items\"\n          :alias :n\n          :validate pos?\n          :require true}\n    :dir {:desc \"Directory name\"\n          :alias :d\n          :validate fs/directory?}\n    :flag {:coerce :boolean\n           :desc \"Flag option\"}}})\n\n(defn -main [args]\n  (let [opts (cli/parse-opts args cli-spec)]\n    (if (:help opts)\n      (println (cli/format-opts cli-spec))\n      (println \"CLI args:\" opts))))\n\n(-main *command-line-args*)\n```\n\n## Options\n\nParse options using `parse-opts` or `parse-args`:\n\n```clojure\n(cli/parse-opts [\"--port\" \"1339\"] {:coerce {:port :long}})\n;;=> {:port 1339}\n\n;; With alias\n(cli/parse-opts [\"-p\" \"1339\"] {:alias {:p :port} :coerce {:port :long}})\n;;=> {:port 1339}\n\n;; Collection values\n(cli/parse-opts [\"--paths\" \"src\" \"test\"] {:coerce {:paths []}})\n;;=> {:paths [\"src\" \"test\"]}\n```\n\n## Subcommands\n\nHandle subcommands using `dispatch`:\n\n```clojure\n(def table\n  [{:cmds [\"copy\"] :fn copy :args->opts [:file]}\n   {:cmds [\"delete\"] :fn delete :args->opts [:file]}\n   {:cmds [] :fn help}])\n\n(defn -main [& args]\n  (cli/dispatch table args {:coerce {:depth :long}}))\n```\n\n## Spec Format\n\nFor better CLI documentation, use the spec format:\n\n```clojure\n(def spec \n  {:port {:ref \"<port>\"\n          :desc \"Port to listen on\"\n          :coerce :long\n          :default 8080\n          :alias :p}})\n```\n\nPrint help with:\n```clojure\n(println (cli/format-opts {:spec spec}))\n```\n\n## Features\n- Auto-coercion for values\n- Boolean flags\n- Required options\n- Value validation\n- Default values\n- Command aliases\n- Error handling\n- Help text generation\n\n# babashka.fs API\n\n```\n(require [babashka.fs :as fs])\n```\n\n## Core Functions\n\n### File System Operations\n- `absolute?` - Returns true if path is absolute\n- `absolutize` - Converts path to absolute path \n- `canonicalize` - Returns canonical path\n- `components` - Returns seq of path components split by file separator\n- `copy` - Copies file to destination. Options: `:replace-existing`, `:copy-attributes`, `:nofollow-links`\n- `copy-tree` - Copies entire file tree recursively\n- `create-dir` - Creates single directory\n- `create-dirs` - Creates directory and parents (like mkdir -p)\n- `create-file` - Creates empty file with optional permissions\n- `create-link` - Creates hard link\n- `create-sym-link` - Creates symbolic link\n- `delete` - Deletes file/directory\n- `delete-if-exists` - Deletes if exists, returns boolean\n- `delete-tree` - Recursively deletes directory tree (like rm -rf)\n- `move` - Moves/renames file or directory\n\n### File Properties\n- `directory?` - Checks if path is directory\n- `exists?` - Checks if path exists\n- `executable?` - Checks if file is executable\n- `hidden?` - Checks if file is hidden\n- `readable?` - Checks if file is readable\n- `regular-file?` - Checks if is regular file\n- `relative?` - Checks if path is relative\n- `size` - Gets file size in bytes\n- `sym-link?` - Checks if is symbolic link\n- `writable?` - Checks if file is writable\n\n### Path Operations\n- `expand-home` - Expands ~ to user home directory\n- `file` - Converts to java.io.File\n- `file-name` - Gets name from path\n- `normalize` - Normalizes path\n- `parent` - Gets parent directory\n- `path` - Converts to java.nio.file.Path\n- `relativize` - Gets relative path between paths\n- `unixify` - Converts path separators to Unix style\n\n### File Content\n- `read-all-bytes` - Reads file as byte array\n- `read-all-lines` - Reads file as lines\n- `write-bytes` - Writes bytes to file\n- `write-lines` - Writes lines to file\n- `update-file` - Updates text file contents\n\n### Time/Dates\n- `creation-time` - Gets file creation time\n- `last-modified-time` - Gets last modified time\n- `set-creation-time` - Sets creation time\n- `set-last-modified-time` - Sets last modified time\n\n### Search & Traversal\n- `glob` - Finds files matching glob pattern\n- `list-dir` - Lists directory contents\n- `list-dirs` - Lists contents of multiple directories\n- `match` - Finds files matching pattern\n- `modified-since` - Finds files modified after reference\n- `walk-file-tree` - Traverses directory tree with visitor functions\n\n### Archive Operations\n- `gunzip` - Extracts gzip file\n- `gzip` - Compresses file with gzip\n- `unzip` - Extracts zip archive\n- `zip` - Creates zip archive\n\n### Temporary Files\n- `create-temp-dir` - Creates temporary directory\n- `create-temp-file` - Creates temporary file\n- `delete-on-exit` - Marks for deletion on JVM exit\n- `temp-dir` - Gets system temp directory\n- `with-temp-dir` - Executes with temporary directory\n\n### Permissions & Attributes\n- `get-attribute` - Gets file attribute\n- `owner` - Gets file owner\n- `posix-file-permissions` - Gets POSIX permissions\n- `read-attributes` - Reads file attributes\n- `set-attribute` - Sets file attribute\n- `set-posix-file-permissions` - Sets POSIX permissions\n- `str->posix` - Converts string to POSIX permissions\n- `posix->str` - Converts POSIX permissions to string\n\n### System & Environment\n- `exec-paths` - Gets executable search paths\n- `which` - Finds executable in PATH\n- `which-all` - Finds all matching executables\n- `windows?` - Checks if running on Windows\n\n### XDG Base Directories\n- `xdg-cache-home` - Gets XDG cache directory\n- `xdg-config-home` - Gets XDG config directory\n- `xdg-data-home` - Gets XDG data directory\n- `xdg-state-home` - Gets XDG state directory\n\n## Constants\n- `file-separator` - System file separator\n- `path-separator` - System path separator\n\nEach function preserves its original docstring and source link from the original API documentation.\n\n\n# babashka.http-client API Reference\n\n## Core HTTP Functions\n\n### Main Request Functions\n- `request [opts]` - Core function for making HTTP requests\n  - Required: `:uri`\n  - Common options: `:headers`, `:method`, `:body`, `:query-params`, `:form-params`\n  - Auth: `:basic-auth`, `:oauth-token`\n  - Response: `:async`, `:timeout`, `:throw`\n  - Advanced: `:client`, `:interceptors`, `:version`\n\n### Convenience Methods\n```clojure\n(get uri [opts])    ; GET request\n(post uri [opts])   ; POST request\n(put uri [opts])    ; PUT request\n(delete uri [opts]) ; DELETE request\n(patch uri [opts])  ; PATCH request\n(head uri [opts])   ; HEAD request\n```\n\n### Client Configuration\n\n#### Client Creation\n- `client [opts]` - Create custom HTTP client\n  - Options:\n    - `:follow-redirects` - `:never`, `:always`, `:normal`\n    - `:connect-timeout` - Connection timeout in ms\n    - `:executor`, `:ssl-context`, `:ssl-parameters`\n    - `:proxy`, `:authenticator`, `:cookie-handler`\n    - `:version` - `:http1.1` or `:http2`\n  \n- `default-client-opts` - Default options used by implicit client\n\n#### HTTP Component Builders\n```clojure\n(->Authenticator {:user \"user\" :pass \"pass\"})\n(->CookieHandler {:store cookie-store :policy :accept-all})\n(->Executor {:threads 4})\n(->ProxySelector {:host \"proxy.com\" :port 8080})\n(->SSLContext {:key-store \"cert.p12\" :key-store-pass \"pass\"})\n(->SSLParameters {:ciphers [\"TLS_AES_128_GCM_SHA256\"]})\n```\n\n## Interceptors\nInterceptors modify requests/responses in the processing chain.\n\n### Request Interceptors\n- `accept-header` - Add Accept header\n- `basic-auth` - Add Basic Auth header\n- `oauth-token` - Add Bearer token header\n- `query-params` - Encode and append query params\n- `form-params` - Encode form parameters\n- `construct-uri` - Build URI from map components\n- `multipart` - Handle multipart requests\n\n### Response Interceptors\n- `decode-body` - Decode response as :string/:stream/:bytes\n- `decompress-body` - Handle gzip/deflate encoding\n- `throw-on-exceptional-status-code` - Error on bad status\n\n### Interceptor Chain\n- `default-interceptors` - Default processing chain\n- Order: Request phase forward, response phase reverse\n\n## WebSocket Support \n\n### WebSocket Creation\n```clojure\n(websocket {\n  :uri \"ws://example.com\"\n  :headers {\"Authorization\" \"Bearer token\"}\n  :on-open (fn [ws] ...)\n  :on-message (fn [ws data last] ...)\n  :on-close (fn [ws status reason] ...)\n})\n```\n\n### WebSocket Operations\n```clojure\n(send! ws data [opts])     ; Send message\n(ping! ws data)            ; Send ping\n(pong! ws data)            ; Send pong\n(close! ws [code reason])  ; Graceful close\n(abort! ws)                ; Immediate close\n```\n\n## Usage Examples\n\n### Basic GET Request\n```clojure\n(get \"https://api.example.com/data\" \n     {:headers {\"Accept\" \"application/json\"}})\n```\n\n### POST with JSON\n```clojure\n(post \"https://api.example.com/create\"\n      {:body \"{\\\"name\\\":\\\"test\\\"}\"\n       :headers {\"Content-Type\" \"application/json\"}})\n```\n\n### Custom Client with Authentication\n```clojure\n(def custom-client \n  (client {:authenticator {:user \"user\" :pass \"pass\"}\n           :follow-redirects :always\n           :connect-timeout 5000}))\n\n(request {:client custom-client\n          :uri \"https://api.example.com/secure\"})\n```\n\n### WebSocket Example\n```clojure\n(def ws (websocket \n          {:uri \"wss://echo.example.com\"\n           :on-message (fn [ws data last] \n                        (println \"Received:\" data))\n           :on-error (fn [ws err] \n                      (println \"Error:\" err))}))\n(send! ws \"Hello WebSocket!\")\n```\n\n## Notes\n- Interceptors can be customized via `:interceptors` option\n- Default HTTP version is HTTP/2\n- For async operations, use `:async true` with callbacks\n- SSL configuration supports both key stores and trust stores\n- WebSocket implementation is based on Java 11 HTTP Client\n\n# Using LLMs from babashka\n\nHere’s a useful snippet for using Simon Willison’s `llm` command line tool from Babashka:\n\n```clojure\n(require '[babashka.process :as p])\n\n(defn- build-command\n  \"Builds the llm command with options\"\n  [{:keys [model system template continue conversation-id\n           no-stream extract extract-last options attachments\n           attachment-types out]\n    :as _opts}]\n  (cond-> [\"llm\"]\n    model (conj \"-m\" model)\n    system (conj \"-s\" system)\n    template (conj \"-t\" template)\n    continue (conj \"-c\")\n    conversation-id (conj \"--cid\" conversation-id)\n    no-stream (conj \"--no-stream\")\n    extract (conj \"-x\")\n    extract-last (conj \"--xl\")\n    out (conj (str \"--out=\" out))\n    options (concat (mapcat (fn [[k v]] [\"-o\" (name k) (str v)]) options))\n    attachments (concat (mapcat (fn [a] [\"-a\" a]) attachments))\n    attachment-types (concat (mapcat (fn [[path type]] [\"--at\" path type]) attachment-types))))\n\n(defn prompt\n  \"Execute an LLM prompt. Returns the response as a string.\n\n   LLM Options:\n   :model - Model to use (e.g. \\\"gpt-4o\\\") \n   :system - System prompt\n   :template - Template name to use\n   :continue - Continue previous conversation\n   :conversation-id - Specific conversation ID to continue\n   :no-stream - Disable streaming output\n   :extract - Extract first code block\n   :extract-last - Extract last code block\n   :options - Map of model options (e.g. {:temperature 0.7})\n   :attachments - Vector of attachment paths/URLs\n   :attachment-types - Map of {path content-type} for attachments\n   :out - Output file path\"\n  ([prompt] (prompt {} prompt))\n  ([opts prompt]\n   (-> (apply p/process\n              {:out :string\n               :in prompt}\n              (build-command opts))\n       deref\n       :out)))\n\n\n;; Example usage:\n#_(comment\n  ;; Basic prompt\n    (prompt \"Write a haiku about coding\")\n\n  ;; Prompt with options\n    (prompt {:model \"gpt-4o\"\n             :system \"You are a helpful assistant\"\n             :options {:temperature 0.7}}\n            \"Explain monads simply\")) \n```\n\n# Working with Markdown files\n\nUpdating front matter in markdown files is best done by using \n\n```\n(require '[clj-yaml.core :as yaml])\n\n(defn extract-frontmatter\n  \"Extracts YAML frontmatter from markdown content.\n   Returns [frontmatter remaining-content] or nil if no frontmatter found.\"\n  [content]\n  (when (str/starts-with? content \"---\\n\")\n    (when-let [end-idx (str/index-of content \"\\n---\\n\" 4)]\n      (let [frontmatter (subs content 4 end-idx)\n            remaining (subs content (+ end-idx 5))]\n        [frontmatter remaining]))))\n\n(defn update-frontmatter\n  \"Updates the frontmatter by adding type: post if not present\"\n  [markdown-str update-fn]\n  (let [[frontmatter content] (extract-frontmatter markdown-str)\n        data (yaml/parse-string frontmatter)\n        new-frontmatter (yaml/generate-string (update-fn data) :dumper-options {:flow-style :block})]\n    (str \"---\\n\" new-frontmatter \"---\\n\" content)))\n```\n\n# Reporting progress\n\n- Use println to give meaningful updates about progress.\n- Explicitly coerce non string values to strings before printing.\n- Use emojis to highlight sucess / error / warning states.",
    "frontmatter": {
      "title": "Babashka Scripting",
      "provenance": "partially AI generated",
      "description": "Create babashka scripts to automate command-line tasks, file operations, and HTTP requests",
      "bump": 8,
      "tags": [
        "lang:clojure"
      ]
    },
    "tags": [
      "lang:clojure"
    ],
    "provenance": "partially AI generated",
    "createdAt": "2025-01-29T21:04:04+02:00",
    "attributedGitHubUser": "martinklepsch",
    "attributedXUser": null
  },
  {
    "title": "Cursor Rules Prompt",
    "description": "A prompt to draft rules files for your project using Cursors codebase understanding",
    "content": "Your goal is to support the user creating a Project Rules file for the Cursor IDE.\n\nUsing rules in Cursor you can control the behavior of the underlying model.\n You can think of it as instructions and/or a system prompt for LLMs.\n\nYour task is to understand the project structure and identify its main parts. \n\nThe goal is create a description of the project that gives a good high-level overview\nof how a software engineer should work in the project. It should be concise focus on whats important.\n\nStart by identifying a few high level components of the project and ask the user to decide which to first write a rules file for.\n\n<cursor-rules-documentation>\nUsing rules in Cursor you can control the behavior of the underlying model. You can think of it as instructions and/or a system prompt for LLMs.\n\n## Project Rules (recommended)\n\nProject rules offer a powerful and flexible system with path specific configurations. Project rules are stored in the `.cursor/rules` directory and provide granular control over AI behavior in different parts of your project.\n\nHere’s how they work\n\n- **Semantic Descriptions**: Each rule can include a description of when it should be applied\n- **File Pattern Matching**: Use glob patterns to specify which files/folders the rule applies to\n- **Automatic Attachment**: Rules can be automatically included when matching files are referenced\n- **Reference files**: Use @file in your project rules to include them as context when the rule is applied.\n\nYou can create a new rule using the command palette with `Cmd + Shift + P` > `New Cursor Rule`. By using project rules you also get the benefit of version control since it’s just a file\n\nExample use cases:\n\n- Framework-specific rules for certain file types (e.g., SolidJS preferences for `.tsx` files)\n- Special handling for auto-generated files (e.g., `.proto` files)\n- Custom UI development patterns\n- Code style and architecture preferences for specific folders\n</cursor-rules-documentation>\n\n<examples>\n<example>\nBelow is an example for a rules file for a project that uses Tailwind CSS.\n<file path=\".cursor/rules/tailwind.mdc\">\n---\ndescription: Styling via Tailwind CSS\nglobs: **/global.css, **/tailwind.config.js\n---\nyada yada yada\n</file>\n</example>\n<example>\nBelow is an example for a rules file for a project that uses TypeScript.\n<file path=\".cursor/rules/typescript.mdc\">\n---\ndescription: TypeScript rules\nglobs: **/*.ts, **/*.tsx\n---\n</file>\n</example>\n</examples>",
    "frontmatter": {
      "title": "Cursor Rules Prompt",
      "description": "A prompt to draft rules files for your project using Cursors codebase understanding",
      "tags": [
        "tool:cursor"
      ],
      "bump": 10
    },
    "tags": [
      "tool:cursor"
    ],
    "createdAt": "2025-03-04T22:02:49+02:00",
    "attributedGitHubUser": "martinklepsch",
    "attributedXUser": null
  },
  {
    "title": "React, ClojureScript Conversion",
    "description": "helpful for converting React code from documentation to ClojureScript (Reagent or Uix) and vice versa",
    "content": "# Converting Between React, Reagent, and UIx: A Comprehensive Guide\n\nThis guide provides examples and patterns for converting React components between JavaScript/JSX, Reagent (ClojureScript), and UIx (ClojureScript).\n\n## Table of Contents\n- [Component Definition](#component-definition)\n- [Element Creation](#element-creation)\n- [Props and Children](#props-and-children)\n- [Hooks](#hooks)\n- [Event Handling](#event-handling)\n- [Class and Style](#class-and-style)\n- [DOM References](#dom-references)\n- [Common Patterns](#common-patterns)\n\n## Component Definition\n\n### React (JavaScript)\n```javascript\nfunction MyComponent({ title, children }) {\n  return (\n    <div className=\"container\">\n      <h1>{title}</h1>\n      {children}\n    </div>\n  );\n}\n\n// With hooks\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <button onClick={() => setCount(count + 1)}>\n      Count: {count}\n    </button>\n  );\n}\n```\n\n### Reagent\n```clojure\n(defn my-component [{:keys [title]} & children]\n  [:div.container\n   [:h1 title]\n   children])\n\n;; With hooks (using with-let for state)\n(defn counter []\n  (let [[count set-count] (react/useState 0)]\n    [:button {:on-click #(set-count (inc count))}\n     (str \"Count: \" count)]))\n```\n\n### UIx\n```clojure\n(defui my-component [{:keys [title children]}]\n  ($ :div.container\n     ($ :h1 title)\n     children))\n\n;; With hooks\n(defui counter []\n  (let [[count set-count] (uix.core/use-state 0)]\n    ($ :button \n       {:on-click #(set-count (inc count))}\n       (str \"Count: \" count))))\n```\n\n## Element Creation\n\n### React (JSX)\n```javascript\n<div className=\"parent\">\n  <Child prop1=\"value1\" prop2={value2}>\n    <span>Inner content</span>\n  </Child>\n</div>\n```\n\n### Reagent\n```clojure\n[:div.parent\n [child {:prop1 \"value1\"\n         :prop2 value2}\n  [:span \"Inner content\"]]]\n```\n\n### UIx\n```clojure\n($ :div.parent\n   ($ child\n      {:prop1 \"value1\"\n       :prop2 value2}\n      ($ :span \"Inner content\")))\n```\n\n## Props and Children\n\n### React\n```javascript\nfunction Container({ style, className, children }) {\n  return (\n    <div style={style} className={className}>\n      {children}\n    </div>\n  );\n}\n\n// Usage\n<Container style={{margin: 10}} className=\"wrapper\">\n  <p>Content</p>\n</Container>\n```\n\n### Reagent\n```clojure\n(defn container [{:keys [style class]} & children]\n  [:div {:style style :class class}\n   children])\n\n;; Usage\n[container {:style {:margin 10}\n           :class \"wrapper\"}\n [:p \"Content\"]]\n```\n\n### UIx\n```clojure\n(defui container [{:keys [style className children]}]\n  ($ :div \n     {:style style\n      :className className}\n     children))\n\n;; Usage\n($ container\n   {:style #js {:margin 10}\n    :className \"wrapper\"}\n   ($ :p \"Content\"))\n```\n\n## Hooks\n\n### React\n```javascript\nfunction Example() {\n  const [count, setCount] = useState(0);\n  const ref = useRef(null);\n  \n  useEffect(() => {\n    document.title = `Count: ${count}`;\n  }, [count]);\n  \n  return <div ref={ref}>{count}</div>;\n}\n```\n\n### Reagent\n```clojure\n(defn example []\n  (let [[count set-count] (react/useState 0)\n        ref (react/useRef nil)]\n    (react/useEffect\n     (fn []\n       (set! (.-title js/document) (str \"Count: \" count))\n       js/undefined)\n     #js [count])\n    [:div {:ref ref} count]))\n```\n\n### UIx\n```clojure\n(defui example []\n  (let [[count set-count] (uix.core/use-state 0)\n        ref (uix.core/use-ref)]\n    (uix.core/use-effect\n     #(set! (.-title js/document) (str \"Count: \" count))\n     [count])\n    ($ :div {:ref ref} count)))\n```\n\n## Event Handling\n\n### React\n```javascript\nfunction Button({ onClick }) {\n  return (\n    <button onClick={(e) => onClick(e.target.value)}>\n      Click me\n    </button>\n  );\n}\n```\n\n### Reagent\n```clojure\n(defn button [{:keys [on-click]}]\n  [:button {:on-click #(on-click (.. % -target -value))}\n   \"Click me\"])\n```\n\n### UIx\n```clojure\n(defui button [{:keys [onClick]}]\n  ($ :button \n     {:onClick #(onClick (.. % -target -value))}\n     \"Click me\"))\n```\n\n## Class and Style\n\n### React\n```javascript\n<div \n  className={`base-class ${active ? 'active' : ''}`}\n  style={{\n    backgroundColor: color,\n    fontSize: size + 'px'\n  }}>\n  Content\n</div>\n```\n\n### Reagent\n```clojure\n[:div\n {:class [\"base-class\" (when active \"active\")]\n  :style {:background-color color\n          :font-size (str size \"px\")}}\n \"Content\"]\n```\n\n### UIx\n```clojure\n($ :div\n   {:className (str \"base-class\" (when active \" active\"))\n    :style #js {:backgroundColor color\n                :fontSize (str size \"px\")}}\n   \"Content\")\n```\n\n## DOM References\n\n### React\n```javascript\nfunction Example() {\n  const inputRef = useRef(null);\n  \n  useEffect(() => {\n    inputRef.current.focus();\n  }, []);\n  \n  return <input ref={inputRef} />;\n}\n```\n\n### Reagent\n```clojure\n(defn example []\n  (let [input-ref (react/useRef nil)]\n    (react/useEffect\n     (fn []\n       (.focus @input-ref)\n       js/undefined)\n     #js [])\n    [:input {:ref input-ref}]))\n```\n\n### UIx\n```clojure\n(defui example []\n  (let [input-ref (uix.core/use-ref)]\n    (uix.core/use-effect\n     #(.focus @input-ref)\n     [])\n    ($ :input {:ref input-ref})))\n```\n\n## Common Patterns\n\n### Conditional Rendering\n\n#### React\n```javascript\n{isLoading ? <Spinner /> : <Content />}\n{showMessage && <Message />}\n```\n\n#### Reagent\n```clojure\n(if is-loading\n  [spinner]\n  [content])\n(when show-message\n  [message])\n```\n\n#### UIx\n```clojure\n(if is-loading\n  ($ spinner)\n  ($ content))\n(when show-message\n  ($ message))\n```\n\n### Lists\n\n#### React\n```javascript\n<ul>\n  {items.map((item) => (\n    <li key={item.id}>{item.text}</li>\n  ))}\n</ul>\n```\n\n#### Reagent\n```clojure\n[:ul\n (for [item items]\n   ^{:key (:id item)}\n   [:li (:text item)])]\n```\n\n#### UIx\n```clojure\n($ :ul\n   (for [item items]\n     ($ :li {:key (:id item)}\n        (:text item))))\n```\n\n### Forms\n\n#### React\n```javascript\nfunction Form() {\n  const [value, setValue] = useState(\"\");\n  return (\n    <input\n      value={value}\n      onChange={e => setValue(e.target.value)}\n    />\n  );\n}\n```\n\n#### Reagent\n```clojure\n(defn form []\n  (let [[value set-value] (react/useState \"\")]\n    [:input\n     {:value value\n      :on-change #(set-value (.. % -target -value))}]))\n```\n\n#### UIx\n```clojure\n(defui form []\n  (let [[value set-value] (uix.core/use-state \"\")]\n    ($ :input\n       {:value value\n        :onChange #(set-value (.. % -target -value))})))\n```\n\n## Key Differences Summary\n\n1. **Component Definition**\n   - React uses function declarations\n   - Reagent uses `defn` with vector syntax\n   - UIx uses `defui` with `$` macro\n\n2. **Element Creation**\n   - React uses JSX\n   - Reagent uses vectors with keywords\n   - UIx uses `$` macro with keywords\n\n3. **Props**\n   - React uses camelCase\n   - Reagent uses kebab-case\n   - UIx maintains original casing from React\n\n4. **Children**\n   - React uses special children prop\n   - Reagent uses variadic arguments\n   - UIx uses children in props map\n\n5. **Hooks**\n   - React uses `useX` naming\n   - Reagent wraps React hooks\n   - UIx provides Clojure-friendly wrappers\n\n6. **Style**\n   - React uses camelCase and JavaScript objects\n   - Reagent uses kebab-case and Clojure maps\n   - UIx uses JavaScript objects with camelCase\n\n## Best Practices\n\n1. When converting from React:\n   - Keep prop names consistent\n   - Convert event handlers appropriately\n   - Handle JavaScript interop carefully\n\n2. When converting from Reagent:\n   - Change vector syntax to `$` macro\n   - Update hook usage to UIx equivalents\n   - Convert event handler names\n\n3. General Tips:\n   - Test thoroughly after conversion\n   - Pay attention to state management differences\n   - Handle refs and effects carefully\n   - Maintain consistent naming conventions\n\n## Common Gotchas\n\n1. **Props Spreading**\n   - React: `{...props}`\n   - Reagent: `props`\n   - UIx: `:& props`\n\n2. **Ref Handling**\n   - React: `useRef(null)`\n   - Reagent: `react/useRef(nil)`\n   - UIx: `use-ref`\n\n3. **Effect Cleanup**\n   - React: Return cleanup function\n   - Reagent: Return js/undefined or cleanup\n   - UIx: Handles undefined return automatically\n\n4. **Class Names**\n   - React: className\n   - Reagent: :class\n   - UIx: className (matches React)\n\nRemember to always test thoroughly after conversion, as subtle differences between the frameworks can lead to unexpected behavior.",
    "frontmatter": {
      "title": "React, ClojureScript Conversion",
      "provenance": "generated based on transcripts, edited",
      "description": "helpful for converting React code from documentation to ClojureScript (Reagent or Uix) and vice versa",
      "bump": 7,
      "tags": [
        "lang:clojure",
        "lib:react"
      ]
    },
    "tags": [
      "lang:clojure",
      "lib:react"
    ],
    "provenance": "generated based on transcripts, edited",
    "createdAt": "2025-01-29T21:04:04+02:00",
    "attributedGitHubUser": "martinklepsch",
    "attributedXUser": null
  },
  {
    "title": "PDF Table Extraction",
    "description": "The prompt I used to extract tabular data from a PDF. In the end model choice seemed to have the biggest impact (Claude won).",
    "content": "Extract the tabular data on this page as csv. Respond with only the content of the csv file without any additional text.\n\nIgnore any linebreaks in the table cells. Make sure to quote every cell value.\nWhen encountering empty cells, provide an empty string as value.\n\nYou must extract ALL the information available in the entire document.",
    "frontmatter": {
      "title": "PDF Table Extraction",
      "provenance": "hand written\nhttps://martinklepsch.org/posts/pdf-to-csv-with-gemini-and-claude.html\n",
      "description": "The prompt I used to extract tabular data from a PDF. In the end model choice seemed to have the biggest impact (Claude won).",
      "tags": [
        "type:prompt"
      ]
    },
    "tags": [
      "type:prompt"
    ],
    "provenance": "hand written\nhttps://martinklepsch.org/posts/pdf-to-csv-with-gemini-and-claude.html\n",
    "createdAt": "2025-02-25T01:40:31+02:00",
    "attributedGitHubUser": "martinklepsch",
    "attributedXUser": null
  },
  {
    "title": "Tailwind v4 Cursor Rules",
    "description": "Cursor rules file for Tailwind CSS v4.0",
    "content": "# Tailwind CSS v4\n\n## Core Changes\n\n- **CSS-first configuration**: Configuration is now done in CSS instead of JavaScript\n  - Use `@theme` directive in CSS instead of `tailwind.config.js`\n  - Example:\n    ```css\n    @import \"tailwindcss\";\n\n    @theme {\n      --font-display: \"Satoshi\", \"sans-serif\";\n      --breakpoint-3xl: 1920px;\n      --color-avocado-500: oklch(0.84 0.18 117.33);\n      --ease-fluid: cubic-bezier(0.3, 0, 0, 1);\n    }\n    ```\n- Legacy `tailwind.config.js` files can still be imported using the `@config` directive:\n  ```css\n  @import \"tailwindcss\";\n  @config \"../../tailwind.config.js\";\n  ```\n- **CSS import syntax**: Use `@import \"tailwindcss\"` instead of `@tailwind` directives\n  - Old: `@tailwind base; @tailwind components; @tailwind utilities;`\n  - New: `@import \"tailwindcss\";`\n\n- **Package changes**:\n  - PostCSS plugin is now `@tailwindcss/postcss` (not `tailwindcss`)\n  - CLI is now `@tailwindcss/cli`\n  - Vite plugin is `@tailwindcss/vite`\n  - No need for `postcss-import` or `autoprefixer` anymore\n\n- **Native CSS cascade layers**: Uses real CSS `@layer` instead of Tailwind's custom implementation\n\n## Theme Configuration\n\n- **CSS theme variables**: All design tokens are available as CSS variables\n  - Namespace format: `--category-name` (e.g., `--color-blue-500`, `--font-sans`)\n  - Access in CSS: `var(--color-blue-500)`\n  - Available namespaces:\n    - `--color-*` : Color utilities like `bg-red-500` and `text-sky-300`\n    - `--font-*` : Font family utilities like `font-sans`\n    - `--text-*` : Font size utilities like `text-xl`\n    - `--font-weight-*` : Font weight utilities like `font-bold`\n    - `--tracking-*` : Letter spacing utilities like `tracking-wide`\n    - `--leading-*` : Line height utilities like `leading-tight`\n    - `--breakpoint-*` : Responsive breakpoint variants like `sm:*`\n    - `--container-*` : Container query variants like `@sm:*` and size utilities like `max-w-md`\n    - `--spacing-*` : Spacing and sizing utilities like `px-4` and `max-h-16`\n    - `--radius-*` : Border radius utilities like `rounded-sm`\n    - `--shadow-*` : Box shadow utilities like `shadow-md`\n    - `--inset-shadow-*` : Inset box shadow utilities like `inset-shadow-xs`\n    - `--drop-shadow-*` : Drop shadow filter utilities like `drop-shadow-md`\n    - `--blur-*` : Blur filter utilities like `blur-md`\n    - `--perspective-*` : Perspective utilities like `perspective-near`\n    - `--aspect-*` : Aspect ratio utilities like `aspect-video`\n    - `--ease-*` : Transition timing function utilities like `ease-out`\n    - `--animate-*` : Animation utilities like `animate-spin`\n  \n\n- **Simplified theme configuration**: Many utilities no longer need theme configuration\n  - Utilities like `grid-cols-12`, `z-40`, and `opacity-70` work without configuration\n  - Data attributes like `data-selected:opacity-100` don't need configuration\n\n- **Dynamic spacing scale**: Derived from a single spacing value\n  - Default: `--spacing: 0.25rem`\n  - Every multiple of the base value is available (e.g., `mt-21` works automatically)\n\n- **Overriding theme namespaces**:\n  - Override entire namespace: `--font-*: initial;`\n  - Override entire theme: `--*: initial;`\n\n\n## New Features\n\n- **Container query support**: Built-in now, no plugin needed\n  - `@container` for container context\n  - `@sm:`, `@md:`, etc. for container-based breakpoints\n  - `@max-md:` for max-width container queries\n  - Combine with `@min-md:@max-xl:hidden` for ranges\n\n- **3D transforms**:\n  - `transform-3d` enables 3D transforms\n  - `rotate-x-*`, `rotate-y-*`, `rotate-z-*` for 3D rotation\n  - `scale-z-*` for z-axis scaling\n  - `translate-z-*` for z-axis translation\n  - `perspective-*` utilities (`perspective-near`, `perspective-distant`, etc.)\n  - `perspective-origin-*` utilities\n  - `backface-visible` and `backface-hidden`\n\n- **Gradient enhancements**:\n  - Linear gradient angles: `bg-linear-45` (renamed from `bg-gradient-*`)\n  - Gradient interpolation: `bg-linear-to-r/oklch`, `bg-linear-to-r/srgb`\n  - Conic and radial gradients: `bg-conic`, `bg-radial-[at_25%_25%]`\n\n- **Shadow enhancements**:\n  - `inset-shadow-*` and `inset-ring-*` utilities\n  - Can be composed with regular `shadow-*` and `ring-*`\n\n- **New CSS property utilities**:\n  - `field-sizing-content` for auto-resizing textareas\n  - `scheme-light`, `scheme-dark` for `color-scheme` property\n  - `font-stretch-*` utilities for variable fonts\n\n## New Variants\n\n- **Composable variants**: Chain variants together\n  - Example: `group-has-data-potato:opacity-100`\n\n- **New variants**:\n  - `starting` variant for `@starting-style` transitions\n  - `not-*` variant for `:not()` pseudo-class\n  - `inert` variant for `inert` attribute\n  - `nth-*` variants (`nth-3:`, `nth-last-5:`, `nth-of-type-4:`, `nth-last-of-type-6:`)\n  - `in-*` variant (like `group-*` but without adding `group` class)\n  - `open` variant now supports `:popover-open`\n  - `**` variant for targeting all descendants\n\n## Custom Extensions\n\n- **Custom utilities**: Use `@utility` directive\n  ```css\n  @utility tab-4 {\n    tab-size: 4;\n  }\n  ```\n\n- **Custom variants**: Use `@variant` directive\n  ```css\n  @variant pointer-coarse (@media (pointer: coarse));\n  @variant theme-midnight (&:where([data-theme=\"midnight\"] *));\n  ```\n\n- **Plugins**: Use `@plugin` directive\n  ```css\n  @plugin \"@tailwindcss/typography\";\n  ```\n\n## Breaking Changes\n\n- **Removed deprecated utilities**:\n  - `bg-opacity-*` → Use `bg-black/50` instead\n  - `text-opacity-*` → Use `text-black/50` instead\n  - And others: `border-opacity-*`, `divide-opacity-*`, etc.\n\n- **Renamed utilities**:\n  - `shadow-sm` → `shadow-xs` (and `shadow` → `shadow-sm`)\n  - `drop-shadow-sm` → `drop-shadow-xs` (and `drop-shadow` → `drop-shadow-sm`)\n  - `blur-sm` → `blur-xs` (and `blur` → `blur-sm`)\n  - `rounded-sm` → `rounded-xs` (and `rounded` → `rounded-sm`)\n  - `outline-none` → `outline-hidden` (for the old behavior)\n\n- **Default style changes**:\n  - Default border color is now `currentColor` (was `gray-200`)\n  - Default `ring` width is now 1px (was 3px)\n  - Placeholder text now uses current color at 50% opacity (was `gray-400`)\n  - Hover styles only apply on devices that support hover (`@media (hover: hover)`)\n\n- **Syntax changes**:\n  - CSS variables in arbitrary values: `bg-(--brand-color)` instead of `bg-[--brand-color]`\n  - Stacked variants now apply left-to-right (not right-to-left)\n  - Use CSS variables instead of `theme()` function \n\n## Advanced Configuration\n\n- **Using a prefix**:\n  ```css\n  @import \"tailwindcss\" prefix(tw);\n  ```\n  - Results in classes like `tw:flex`, `tw:bg-red-500`, `tw:hover:bg-red-600`\n\n- **Source detection**:\n  - Automatic by default (ignores `.gitignore` files and binary files)\n  - Add sources: `@source \"../node_modules/@my-company/ui-lib\";`\n  - Disable automatic detection: `@import \"tailwindcss\" source(none);`\n\n- **Legacy config files**:\n  ```css\n  @import \"tailwindcss\";\n  @config \"../../tailwind.config.js\";\n  ```\n\n- **Dark mode configuration**:\n  ```css\n  @import \"tailwindcss\";\n  @variant dark (&:where(.dark, .dark *));\n  ```\n\n- **Container customization**: Extend with `@utility`\n  ```css\n  @utility container {\n    margin-inline: auto;\n    padding-inline: 2rem;\n  }\n  ```\n\n- **Using `@apply` in Vue/Svelte**:\n  ```html\n  <style>\n    @import \"../../my-theme.css\" theme(reference);\n    /* or */\n    @import \"tailwindcss/theme\" theme(reference);\n    \n    h1 {\n      @apply font-bold text-2xl text-red-500;\n    }\n  </style>\n  ```",
    "frontmatter": {
      "title": "Tailwind v4 Cursor Rules",
      "description": "Cursor rules file for Tailwind CSS v4.0",
      "target": ".cursor/rules/tailwind-css-v4.mdc",
      "bump": 11,
      "tags": [
        "tool:cursor",
        "lib:tailwindcss"
      ],
      "globs": [
        "**/*.{js,ts,jsx,tsx,mdx,css}"
      ]
    },
    "tags": [
      "tool:cursor",
      "lib:tailwindcss"
    ],
    "targetFile": ".cursor/rules/tailwind-css-v4.mdc",
    "createdAt": "2025-03-06T20:13:56+02:00",
    "attributedGitHubUser": "danhollick",
    "attributedXUser": null
  },
  {
    "title": "Cloudflare Workers Guide",
    "description": "A full description of Workers, Durable Objects, Workers KV, D1, R1 and more",
    "content": "<system_context>\nYou are an advanced assistant specialized in generating Cloudflare Workers code. You have deep knowledge of Cloudflare's platform, APIs, and best practices.\n</system_context>\n\n<behavior_guidelines>\n\n- Respond in a friendly and concise manner\n- Focus exclusively on Cloudflare Workers solutions\n- Provide complete, self-contained solutions\n- Default to current best practices\n- Ask clarifying questions when requirements are ambiguous\n\n</behavior_guidelines>\n\n<code_standards>\n\n- Generate code in TypeScript by default unless JavaScript is specifically requested\n- Use ES modules format exclusively (never use Service Worker format)\n- You SHALL keep all code in a single file unless otherwise specified\n- Minimize external dependencies, unless there is an official SDK or library for the service you are integrating with, then use it to simplify the implementation.\n- Do not use libraries that have FFI/native/C bindings.\n- Follow Cloudflare Workers security best practices\n- Never bake in secrets into the code\n- Include proper error handling and logging\n- Add appropriate TypeScript types and interfaces\n- Include comments explaining complex logic\n\n</code_standards>\n\n<output_format>\n\n- Use markdown code blocks to separate code from explanations\n- Provide separate blocks for:\n  1. Main worker code (index.ts/index.js)\n  2. Configuration (wrangler.jsonc)\n  3. Type definitions (if applicable)\n  4. Example usage/tests\n- Always output complete files, never partial updates or diffs\n- Format code consistently using standard TypeScript/JavaScript conventions\n\n</output_format>\n\n<cloudflare_integrations>\n\n- When data storage is needed, integrate with appropriate Cloudflare services:\n  - Workers KV for key-value storage, including configuration data, user profiles, and A/B testing\n  - Durable Objects for strongly consistent state management, storage, and multiplayer co-ordination use-cases\n  - D1 for relational data and for its SQL dialect\n  - R2 for object storage, including storing structured data, AI assets, image assets and for user-facing uploads\n  - Hyperdrive to connect to existing (PostgreSQL) databases that a developer may already have\n  - Queues for asynchronous processing and background tasks\n  - Vectorize for storing embeddings and to support vector search (often in combination with Workers AI)\n  - Workers Analytics Engine for tracking user events, billing, metrics and high-cardinality analytics\n  - Workers AI as the default AI API for inference requests. If a user requests Claude or OpenAI however, use the appropriate, official SDKs for those APIs.\n  - Browser Rendering for remote browser capabilties, searching the web, and using Puppeteer APIs.\n  - Workers Static Assets for hosting frontend applications and static files when building a Worker that requires a frontend or uses a frontend framework such as React\n- Include all necessary bindings in both code and wrangler.jsonc\n- Add appropriate environment variable definitions\n\n</cloudflare_integrations>\n\n<configuration_requirements>\n\n- Always provide a wrangler.jsonc (not wrangler.toml)\n- Include:\n  - Appropriate triggers (http, scheduled, queues)\n  - Required bindings\n  - Environment variables\n  - Compatibility flags\n  - Set compatibility_date = \"2025-02-11\"\n  - Set compatibility_flags = [\"nodejs_compat\"]\n  - Set `enabled = true` and `head_sampling_rate = 1` for `[observability]` when generating the wrangler configuration\n  - Routes and domains (only if applicable)\n  - Do NOT include dependencies in the wrangler.jsonc file\n  - Only include bindings that are used in the code\n\n<example id=\"wrangler.jsonc\">\n<code language=\"jsonc\">\n// wrangler.jsonc\n{\n  \"name\": \"app-name-goes-here\", // name of the app\n  \"main\": \"src/index.ts\", // default file\n  \"compatibility_date\": \"2025-02-11\",\n  \"compatibility_flags\": [\"nodejs_compat\"], // Enable Node.js compatibility\n  \"observability\": {\n    // Enable logging by default\n    \"enabled\": true,\n   }\n}\n</code>\n</example>\n<key_points>\n\n  - Defines a name for the app the user is building\n  - Sets `src/index.ts` as the default location for main\n  - Sets `compatibility_flags`\n  - Sets `observability.enabled = true`\n\n</key_points>\n</example>\n</configuration_requirements>\n\n<security_guidelines>\n\n- Implement proper request validation\n- Use appropriate security headers\n- Handle CORS correctly when needed\n- Implement rate limiting where appropriate\n- Follow least privilege principle for bindings\n- Sanitize user inputs\n\n</security_guidelines>\n\n<testing_guidance>\n\n- Include basic test examples\n- Provide curl commands for API endpoints\n- Add example environment variable values\n- Include sample requests and responses\n\n</testing_guidance>\n\n<performance_guidelines>\n\n- Optimize for cold starts\n- Minimize unnecessary computation\n- Use appropriate caching strategies\n- Consider Workers limits and quotas\n- Implement streaming where beneficial\n\n</performance_guidelines>\n\n<error_handling>\n\n- Implement proper error boundaries\n- Return appropriate HTTP status codes\n- Provide meaningful error messages\n- Log errors appropriately\n- Handle edge cases gracefully\n\n</error_handling>\n\n<websocket_guidelines>\n\n- Always use WebSocket Hibernation API instead of legacy WebSocket API unless otherwise specified\n- You SHALL use the Durable Objects WebSocket Hibernation API when providing WebSocket handling code within a Durable Object. - Refer to <example id=\"durable_objects_websocket\"> for an example implementation.\n- Use `this.ctx.acceptWebSocket(server)` to accept the WebSocket connection and do NOT use the `server.accept()` method.\n- Define an `async webSocketMessage()` handler that is invoked when a message is received from the client\n- Define an `async webSocketClose()` handler that is invoked when the WebSocket connection is closed\n- Do NOT use the `addEventListener` pattern to handle WebSocket events.\n- Handle WebSocket upgrade requests explicitly\n\n</websocket_guidelines>\n\n<code_examples>\n\n<example id=\"durable_objects_websocket\">\n<description>\nExample of using the Hibernatable WebSocket API in Durable Objects to handle WebSocket connections.\n</description>\n\n<code language=\"typescript\">\nimport { DurableObject } from \"cloudflare:workers\";\n\ninterface Env {\nWEBSOCKET_HIBERNATION_SERVER: DurableObject<Env>;\n}\n\n// Durable Object\nexport class WebSocketHibernationServer extends DurableObject {\nasync fetch(request) {\n// Creates two ends of a WebSocket connection.\nconst webSocketPair = new WebSocketPair();\nconst [client, server] = Object.values(webSocketPair);\n\n    // Calling `acceptWebSocket()` informs the runtime that this WebSocket is to begin terminating\n    // request within the Durable Object. It has the effect of \"accepting\" the connection,\n    // and allowing the WebSocket to send and receive messages.\n    // Unlike `ws.accept()`, `state.acceptWebSocket(ws)` informs the Workers Runtime that the WebSocket\n    // is \"hibernatable\", so the runtime does not need to pin this Durable Object to memory while\n    // the connection is open. During periods of inactivity, the Durable Object can be evicted\n    // from memory, but the WebSocket connection will remain open. If at some later point the\n    // WebSocket receives a message, the runtime will recreate the Durable Object\n    // (run the `constructor`) and deliver the message to the appropriate handler.\n    this.ctx.acceptWebSocket(server);\n\n    return new Response(null, {\n          status: 101,\n          webSocket: client,\n    });\n\n    },\n\n    async webSocketMessage(ws: WebSocket, message: string | ArrayBuffer): void | Promise<void> {\n     // Upon receiving a message from the client, reply with the same message,\n     // but will prefix the message with \"[Durable Object]: \" and return the\n     // total number of connections.\n     ws.send(\n     `[Durable Object] message: ${message}, connections: ${this.ctx.getWebSockets().length}`,\n     );\n    },\n\n    async webSocketClose(ws: WebSocket, code: number, reason: string, wasClean: boolean) void | Promise<void> {\n     // If the client closes the connection, the runtime will invoke the webSocketClose() handler.\n     ws.close(code, \"Durable Object is closing WebSocket\");\n    },\n\n    async webSocketError(ws: WebSocket, error: unknown): void | Promise<void> {\n     console.error(\"WebSocket error:\", error);\n     ws.close(1011, \"WebSocket error\");\n    }\n\n}\n\n</code>\n\n<configuration>\n{\n  \"name\": \"websocket-hibernation-server\",\n  \"durable_objects\": {\n    \"bindings\": [\n      {\n        \"name\": \"WEBSOCKET_HIBERNATION_SERVER\",\n        \"class_name\": \"WebSocketHibernationServer\"\n      }\n    ]\n  },\n  \"migrations\": [\n    {\n      \"tag\": \"v1\",\n      \"new_classes\": [\"WebSocketHibernationServer\"]\n    }\n  ]\n}\n</configuration>\n\n<key_points>\n\n- Uses the WebSocket Hibernation API instead of the legacy WebSocket API\n- Calls `this.ctx.acceptWebSocket(server)` to accept the WebSocket connection\n- Has a `webSocketMessage()` handler that is invoked when a message is received from the client\n- Has a `webSocketClose()` handler that is invoked when the WebSocket connection is closed\n- Does NOT use the `server.addEventListener` API unless explicitly requested.\n- Don't over-use the \"Hibernation\" term in code or in bindings. It is an implementation detail.\n  </key_points>\n  </example>\n\n<example id=\"durable_objects_alarm_example\">\n<description>\nExample of using the Durable Object Alarm API to trigger an alarm and reset it.\n</description>\n\n<code language=\"typescript\">\nimport { DurableObject } from \"cloudflare:workers\";\n\ninterface Env {\nALARM_EXAMPLE: DurableObject<Env>;\n}\n\nexport default {\n  async fetch(request, env) {\n    let url = new URL(request.url);\n    let userId = url.searchParams.get(\"userId\") || crypto.randomUUID();\n    let id = env.ALARM_EXAMPLE.idFromName(userId);\n    return await env.ALARM_EXAMPLE.get(id).fetch(request);\n  },\n};\n\nconst SECONDS = 1000;\n\nexport class AlarmExample extends DurableObject {\nconstructor(ctx, env) {\nthis.ctx = ctx;\nthis.storage = ctx.storage;\n}\nasync fetch(request) {\n// If there is no alarm currently set, set one for 10 seconds from now\nlet currentAlarm = await this.storage.getAlarm();\nif (currentAlarm == null) {\nthis.storage.setAlarm(Date.now() + 10 \\_ SECONDS);\n}\n}\nasync alarm(alarmInfo) {\n// The alarm handler will be invoked whenever an alarm fires.\n// You can use this to do work, read from the Storage API, make HTTP calls\n// and set future alarms to run using this.storage.setAlarm() from within this handler.\nif (alarmInfo?.retryCount != 0) {\nconsole.log(\"This alarm event has been attempted ${alarmInfo?.retryCount} times before.\");\n}\n\n// Set a new alarm for 10 seconds from now before exiting the handler\nthis.storage.setAlarm(Date.now() + 10 \\_ SECONDS);\n}\n}\n\n</code>\n\n<configuration>\n{\n  \"name\": \"durable-object-alarm\",\n  \"durable_objects\": {\n    \"bindings\": [\n      {\n        \"name\": \"ALARM_EXAMPLE\",\n        \"class_name\": \"DurableObjectAlarm\"\n      }\n    ]\n  },\n  \"migrations\": [\n    {\n      \"tag\": \"v1\",\n      \"new_classes\": [\"DurableObjectAlarm\"]\n    }\n  ]\n}\n</configuration>\n\n<key_points>\n\n- Uses the Durable Object Alarm API to trigger an alarm\n- Has a `alarm()` handler that is invoked when the alarm is triggered\n- Sets a new alarm for 10 seconds from now before exiting the handler\n  </key_points>\n  </example>\n\n<example id=\"kv_session_authentication_example\">\n<description>\nUsing Workers KV to store session data and authenticate requests, with Hono as the router and middleware.\n</description>\n\n<code language=\"typescript\">\n// src/index.ts\nimport { Hono } from 'hono'\nimport { cors } from 'hono/cors'\n\ninterface Env {\nAUTH_TOKENS: KVNamespace;\n}\n\nconst app = new Hono<{ Bindings: Env }>()\n\n// Add CORS middleware\napp.use('\\*', cors())\n\napp.get('/', async (c) => {\ntry {\n// Get token from header or cookie\nconst token = c.req.header('Authorization')?.slice(7) ||\nc.req.header('Cookie')?.match(/auth_token=([^;]+)/)?.[1];\nif (!token) {\nreturn c.json({\nauthenticated: false,\nmessage: 'No authentication token provided'\n}, 403)\n}\n\n    // Check token in KV\n    const userData = await c.env.AUTH_TOKENS.get(token)\n\n    if (!userData) {\n      return c.json({\n        authenticated: false,\n        message: 'Invalid or expired token'\n      }, 403)\n    }\n\n    return c.json({\n      authenticated: true,\n      message: 'Authentication successful',\n      data: JSON.parse(userData)\n    })\n\n} catch (error) {\nconsole.error('Authentication error:', error)\nreturn c.json({\nauthenticated: false,\nmessage: 'Internal server error'\n}, 500)\n}\n})\n\nexport default app\n</code>\n\n<configuration>\n{\n  \"name\": \"auth-worker\",\n  \"main\": \"src/index.ts\",\n  \"compatibility_date\": \"2025-02-11\",\n  \"kv_namespaces\": [\n    {\n      \"binding\": \"AUTH_TOKENS\",\n      \"id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n      \"preview_id\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    }\n  ]\n}\n</configuration>\n\n<key_points>\n\n- Uses Hono as the router and middleware\n- Uses Workers KV to store session data\n- Uses the Authorization header or Cookie to get the token\n- Checks the token in Workers KV\n- Returns a 403 if the token is invalid or expired\n\n</key_points>\n</example>\n\n<example id=\"queue_producer_consumer_example\">\n<description>\nUse Cloudflare Queues to produce and consume messages.\n</description>\n\n<code language=\"typescript\">\n// src/producer.ts\ninterface Env {\n  REQUEST_QUEUE: Queue;\n  UPSTREAM_API_URL: string;\n  UPSTREAM_API_KEY: string;\n}\n\nexport default {\nasync fetch(request: Request, env: Env) {\nconst info = {\ntimestamp: new Date().toISOString(),\nmethod: request.method,\nurl: request.url,\nheaders: Object.fromEntries(request.headers),\n};\nawait env.REQUEST_QUEUE.send(info);\n\nreturn Response.json({\nmessage: 'Request logged',\nrequestId: crypto.randomUUID()\n});\n\n},\n\nasync queue(batch: MessageBatch<any>, env: Env) {\nconst requests = batch.messages.map(msg => msg.body);\n\n    const response = await fetch(env.UPSTREAM_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${env.UPSTREAM_API_KEY}`\n      },\n      body: JSON.stringify({\n        timestamp: new Date().toISOString(),\n        batchSize: requests.length,\n        requests\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Upstream API error: ${response.status}`);\n    }\n\n}\n};\n\n</code>\n\n<configuration>\n{\n  \"name\": \"request-logger-consumer\",\n  \"main\": \"src/index.ts\",\n  \"compatibility_date\": \"2025-02-11\",\n  \"queues\": {\n        \"producers\": [{\n      \"name\": \"request-queue\",\n      \"binding\": \"REQUEST_QUEUE\"\n    }],\n    \"consumers\": [{\n      \"name\": \"request-queue\",\n      \"dead_letter_queue\": \"request-queue-dlq\",\n      \"retry_delay\": 300\n    }]\n  },\n  \"vars\": {\n    \"UPSTREAM_API_URL\": \"https://api.example.com/batch-logs\",\n    \"UPSTREAM_API_KEY\": \"\"\n  }\n}\n</configuration>\n\n<key_points>\n\n- Defines both a producer and consumer for the queue\n- Uses a dead letter queue for failed messages\n- Uses a retry delay of 300 seconds to delay the re-delivery of failed messages\n- Shows how to batch requests to an upstream API\n\n</key_points>\n</example>\n\n<example id=\"hyperdrive_connect_to_postgres\">\n<description>\nConnect to and query a Postgres database using Cloudflare Hyperdrive.\n</description>\n\n<code language=\"typescript\">\n// Postgres.js 3.4.5 or later is recommended\nimport postgres from \"postgres\";\n\nexport interface Env {\n// If you set another name in the Wrangler config file as the value for 'binding',\n// replace \"HYPERDRIVE\" with the variable name you defined.\nHYPERDRIVE: Hyperdrive;\n}\n\nexport default {\nasync fetch(request, env, ctx): Promise<Response> {\nconsole.log(JSON.stringify(env));\n// Create a database client that connects to your database via Hyperdrive.\n//\n// Hyperdrive generates a unique connection string you can pass to\n// supported drivers, including node-postgres, Postgres.js, and the many\n// ORMs and query builders that use these drivers.\nconst sql = postgres(env.HYPERDRIVE.connectionString)\n\n    try {\n      // Test query\n      const results = await sql`SELECT * FROM pg_tables`;\n\n      // Clean up the client, ensuring we don't kill the worker before that is\n      // completed.\n      ctx.waitUntil(sql.end());\n\n      // Return result rows as JSON\n      return Response.json(results);\n    } catch (e) {\n      console.error(e);\n      return Response.json(\n        { error: e instanceof Error ? e.message : e },\n        { status: 500 },\n      );\n    }\n\n},\n} satisfies ExportedHandler<Env>;\n\n</code>\n\n<configuration>\n{\n  \"name\": \"hyperdrive-postgres\",\n  \"main\": \"src/index.ts\",\n  \"compatibility_date\": \"2025-02-11\",\n  \"hyperdrive\": [\n    {\n      \"binding\": \"HYPERDRIVE\",\n      \"id\": \"<YOUR_DATABASE_ID>\"\n    }\n  ]\n}\n</configuration>\n\n<usage>\n// Install Postgres.js\nnpm install postgres\n\n// Create a Hyperdrive configuration\nnpx wrangler hyperdrive create <YOUR_CONFIG_NAME> --connection-string=\"postgres://user:password@HOSTNAME_OR_IP_ADDRESS:PORT/database_name\"\n\n</usage>\n\n<key_points>\n\n- Installs and uses Postgres.js as the database client/driver.\n- Creates a Hyperdrive configuration using wrangler and the database connection string.\n- Uses the Hyperdrive connection string to connect to the database.\n- Calling `sql.end()` is optional, as Hyperdrive will handle the connection pooling.\n\n</key_points>\n</example>\n\n<example id=\"workflows\">\n<description>\nUsing Workflows for durable execution, async tasks, and human-in-the-loop workflows.\n</description>\n\n<code language=\"typescript\">\nimport { WorkflowEntrypoint, WorkflowStep, WorkflowEvent } from 'cloudflare:workers';\n\ntype Env = {\n// Add your bindings here, e.g. Workers KV, D1, Workers AI, etc.\nMY_WORKFLOW: Workflow;\n};\n\n// User-defined params passed to your workflow\ntype Params = {\nemail: string;\nmetadata: Record<string, string>;\n};\n\nexport class MyWorkflow extends WorkflowEntrypoint<Env, Params> {\nasync run(event: WorkflowEvent<Params>, step: WorkflowStep) {\n// Can access bindings on `this.env`\n// Can access params on `event.payload`\nconst files = await step.do('my first step', async () => {\n// Fetch a list of files from $SOME_SERVICE\nreturn {\nfiles: [\n'doc_7392_rev3.pdf',\n'report_x29_final.pdf',\n'memo_2024_05_12.pdf',\n'file_089_update.pdf',\n'proj_alpha_v2.pdf',\n'data_analysis_q2.pdf',\n'notes_meeting_52.pdf',\n'summary_fy24_draft.pdf',\n],\n};\n});\n\n    const apiResponse = await step.do('some other step', async () => {\n      let resp = await fetch('https://api.cloudflare.com/client/v4/ips');\n      return await resp.json<any>();\n    });\n\n    await step.sleep('wait on something', '1 minute');\n\n    await step.do(\n      'make a call to write that could maybe, just might, fail',\n      // Define a retry strategy\n      {\n        retries: {\n          limit: 5,\n          delay: '5 second',\n          backoff: 'exponential',\n        },\n        timeout: '15 minutes',\n      },\n      async () => {\n        // Do stuff here, with access to the state from our previous steps\n        if (Math.random() > 0.5) {\n          throw new Error('API call to $STORAGE_SYSTEM failed');\n        }\n      },\n    );\n\n}\n}\n\nexport default {\nasync fetch(req: Request, env: Env): Promise<Response> {\nlet url = new URL(req.url);\n\n    if (url.pathname.startsWith('/favicon')) {\n      return Response.json({}, { status: 404 });\n    }\n\n    // Get the status of an existing instance, if provided\n    let id = url.searchParams.get('instanceId');\n    if (id) {\n      let instance = await env.MY_WORKFLOW.get(id);\n      return Response.json({\n        status: await instance.status(),\n      });\n    }\n\n    const data = await req.json()\n\n    // Spawn a new instance and return the ID and status\n    let instance = await env.MY_WORKFLOW.create({\n      // Define an ID for the Workflow instance\n      id: crypto.randomUUID(),\n       // Pass data to the Workflow instance\n      // Available on the WorkflowEvent\n       params: data,\n    });\n\n    return Response.json({\n      id: instance.id,\n      details: await instance.status(),\n    });\n\n},\n};\n\n</code>\n\n<configuration>\n{\n  \"name\": \"workflows-starter\",\n  \"main\": \"src/index.ts\",\n  \"compatibility_date\": \"2025-02-11\",\n  \"workflows\": [\n    {\n      \"name\": \"workflows-starter\",\n      \"binding\": \"MY_WORKFLOW\",\n      \"class_name\": \"MyWorkflow\"\n    }\n  ]\n}\n</configuration>\n\n<key_points>\n\n- Defines a Workflow by extending the WorkflowEntrypoint class.\n- Defines a run method on the Workflow that is invoked when the Workflow is started.\n- Ensures that `await` is used before calling `step.do` or `step.sleep`\n- Passes a payload (event) to the Workflow from a Worker\n- Defines a payload type and uses TypeScript type arguments to ensure type safety\n\n</key_points>\n</example>\n\n<example id=\"workers_analytics_engine\">\n<description>\n Using Workers Analytics Engine for writing event data.\n</description>\n\n<code language=\"typescript\">\ninterface Env {\n USER_EVENTS: AnalyticsEngineDataset;\n}\n\nexport default {\nasync fetch(req: Request, env: Env): Promise<Response> {\nlet url = new URL(req.url);\nlet path = url.pathname;\nlet userId = url.searchParams.get(\"userId\");\n\n     // Write a datapoint for this visit, associating the data with\n     // the userId as our Analytics Engine 'index'\n     env.USER_EVENTS.writeDataPoint({\n      // Write metrics data: counters, gauges or latency statistics\n      doubles: [],\n      // Write text labels - URLs, app names, event_names, etc\n      blobs: [path],\n      // Provide an index that groups your data correctly.\n      indexes: [userId],\n     });\n\n     return Response.json({\n      hello: \"world\",\n     });\n    ,\n\n};\n\n</code>\n\n<configuration>\n{\n  \"name\": \"analytics-engine-example\",\n  \"main\": \"src/index.ts\",\n  \"compatibility_date\": \"2025-02-11\",\n  \"analytics_engine_datasets\": [\n      {\n        \"binding\": \"<BINDING_NAME>\",\n        \"dataset\": \"<DATASET_NAME>\"\n      }\n    ]\n  }\n}\n</configuration>\n\n<usage>\n// Query data within the 'temperatures' dataset\n// This is accessible via the REST API at https://api.cloudflare.com/client/v4/accounts/{account_id}/analytics_engine/sql\nSELECT\n    timestamp,\n    blob1 AS location_id,\n    double1 AS inside_temp,\n    double2 AS outside_temp\nFROM temperatures\nWHERE timestamp > NOW() - INTERVAL '1' DAY\n\n// List the datasets (tables) within your Analytics Engine\ncurl \"<https://api.cloudflare.com/client/v4/accounts/{account_id}/analytics_engine/sql>\" \\\n--header \"Authorization: Bearer <API_TOKEN>\" \\\n--data \"SHOW TABLES\"\n\n</usage>\n\n<key_points>\n\n- Binds an Analytics Engine dataset to the Worker\n- Uses the `AnalyticsEngineDataset` type when using TypeScript for the binding\n- Writes event data using the `writeDataPoint` method and writes an `AnalyticsEngineDataPoint`\n- Does NOT `await` calls to `writeDataPoint`, as it is non-blocking\n- Defines an index as the key representing an app, customer, merchant or tenant.\n- Developers can use the GraphQL or SQL APIs to query data written to Analytics Engine\n  </key_points>\n  </example>\n\n<example id=\"browser_rendering_workers\">\n<description>\nUse the Browser Rendering API as a headless browser to interact with websites from a Cloudflare Worker.\n</description>\n\n<code language=\"typescript\">\nimport puppeteer from \"@cloudflare/puppeteer\";\n\ninterface Env {\n  BROWSER_RENDERING: Fetcher;\n}\n\nexport default {\n  async fetch(request, env): Promise<Response> {\n    const { searchParams } = new URL(request.url);\n    let url = searchParams.get(\"url\");\n\n    if (url) {\n      url = new URL(url).toString(); // normalize\n      const browser = await puppeteer.launch(env.MYBROWSER);\n      const page = await browser.newPage();\n      await page.goto(url);\n      // Parse the page content\n      const content = await page.content();\n      // Find text within the page content\n      const text = await page.$eval(\"body\", (el) => el.textContent);\n      // Do something with the text\n      // e.g. log it to the console, write it to KV, or store it in a database.\n      console.log(text);\n\n      // Ensure we close the browser session\n      await browser.close();\n\n      return Response.json({\n        bodyText: text,\n      })\n    } else {\n      return Response.json({\n          error: \"Please add an ?url=https://example.com/ parameter\"\n      }, { status: 400 })\n    }\n  },\n} satisfies ExportedHandler<Env>;\n</code>\n\n<configuration>\n{\n  \"name\": \"browser-rendering-example\",\n  \"main\": \"src/index.ts\",\n  \"compatibility_date\": \"2025-02-11\",\n  \"browser\": [\n    {\n      \"binding\": \"BROWSER_RENDERING\",\n    }\n  ]\n}\n</configuration>\n\n<usage>\n// Install @cloudflare/puppeteer\nnpm install @cloudflare/puppeteer --save-dev\n</usage>\n\n<key_points>\n\n- Configures a BROWSER_RENDERING binding\n- Passes the binding to Puppeteer\n- Uses the Puppeteer APIs to navigate to a URL and render the page\n- Parses the DOM and returns context for use in the response\n- Correctly creates and closes the browser instance\n\n</key_points>\n</example>\n\n<example id=\"static-assets\">\n<code language=\"typescript\">\n// src/index.ts\n\ninterface Env {\n  ASSETS: Fetcher;\n}\n\nexport default {\n  fetch(request, env) {\n    const url = new URL(request.url);\n\n    if (url.pathname.startsWith(\"/api/\")) {\n      return Response.json({\n        name: \"Cloudflare\",\n      });\n    }\n\n    return env.ASSETS.fetch(request);\n  },\n} satisfies ExportedHandler<Env>;\n</code>\n<configuration>\n{\n  \"name\": \"my-app\",\n  \"main\": \"src/index.ts\",\n  \"compatibility_date\": \"<TBD>\",\n  \"assets\": { \"directory\": \"./public/\", \"not_found_handling\": \"single-page-application\", \"binding\": \"ASSETS\" },\n  \"observability\": {\n    \"enabled\": true\n  }\n}\n</configuration>\n<key_points>\n- Configures a ASSETS binding\n- Uses /public/ as the directory the build output goes to from the framework of choice\n- The Worker will handle any requests that a path cannot be found for and serve as the API\n- If the application is a single-page application (SPA), HTTP 404 (Not Found) requests will direct to the SPA.\n\n</key_points>\n</example>\n\n</code_examples>\n\n<api_patterns>\n\n<pattern id=\"websocket_coordination\">\n<description>\nFan-in/fan-out for WebSockets. Uses the Hibernatable WebSockets API within Durable Objects. Does NOT use the legacy addEventListener API.\n</description>\n<implementation>\nexport class WebSocketHibernationServer extends DurableObject {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext) {\n    // Creates two ends of a WebSocket connection.\n    const webSocketPair = new WebSocketPair();\n    const [client, server] = Object.values(webSocketPair);\n\n    // Call this to accept the WebSocket connection.\n    // Do NOT call server.accept() (this is the legacy approach and is not preferred)\n    this.ctx.acceptWebSocket(server);\n\n    return new Response(null, {\n          status: 101,\n          webSocket: client,\n    });\n},\n\nasync webSocketMessage(ws: WebSocket, message: string | ArrayBuffer): void | Promise<void> {\n  // Invoked on each WebSocket message.\n  ws.send(message)\n},\n\nasync webSocketClose(ws: WebSocket, code: number, reason: string, wasClean: boolean) void | Promise<void> {\n  // Invoked when a client closes the connection.\n  ws.close(code, \"<message>\");\n},\n\nasync webSocketError(ws: WebSocket, error: unknown): void | Promise<void> {\n  // Handle WebSocket errors\n}\n}\n</implementation>\n</pattern>\n</api_patterns>\n\n<user_prompt>\n{user_prompt}\n</user_prompt>",
    "frontmatter": {
      "title": "Cloudflare Workers Guide",
      "description": "A full description of Workers, Durable Objects, Workers KV, D1, R1 and more",
      "provenance": "copied from https://developers.cloudflare.com/workers/get-started/prompting/",
      "bump": 9
    },
    "provenance": "copied from https://developers.cloudflare.com/workers/get-started/prompting/",
    "createdAt": "2025-02-25T03:18:34+02:00",
    "attributedGitHubUser": "cloudflare",
    "attributedXUser": null
  },
  {
    "title": "Cursor Rules Location",
    "description": "Rules for creating and organizing rules files for Cursor",
    "content": "# Cursor Rules Location\n\nRules for placing and organizing Cursor rule files in the repository.\n\n<rule>\nname: cursor_rules_location\ndescription: Standards for placing Cursor rule files in the correct directory\nfilters:\n  # Match any .mdc files\n  - type: file_extension\n    pattern: \"\\\\.mdc$\"\n  # Match files that look like Cursor rules\n  - type: content\n    pattern: \"(?s)<rule>.*?</rule>\"\n  # Match file creation events\n  - type: event\n    pattern: \"file_create\"\n\nactions:\n  - type: reject\n    conditions:\n      - pattern: \"^(?!\\\\.\\\\/\\\\.cursor\\\\/rules\\\\/.*\\\\.mdc$)\"\n        message: \"Cursor rule files (.mdc) must be placed in the .cursor/rules directory\"\n\n  - type: suggest\n    message: |\n      When creating Cursor rules:\n\n      1. Always place rule files in PROJECT_ROOT/.cursor/rules/:\n         ```\n         .cursor/rules/\n         ├── your-rule-name.mdc\n         ├── another-rule.mdc\n         └── ...\n         ```\n\n      2. Follow the naming convention:\n         - Use kebab-case for filenames\n         - Always use .mdc extension\n         - Make names descriptive of the rule's purpose\n\n      3. Directory structure:\n         ```\n         PROJECT_ROOT/\n         ├── .cursor/\n         │   └── rules/\n         │       ├── your-rule-name.mdc\n         │       └── ...\n         └── ...\n         ```\n\n      4. Never place rule files:\n         - In the project root\n         - In subdirectories outside .cursor/rules\n         - In any other location\n\nexamples:\n  - input: |\n      # Bad: Rule file in wrong location\n      rules/my-rule.mdc\n      my-rule.mdc\n      .rules/my-rule.mdc\n\n      # Good: Rule file in correct location\n      .cursor/rules/my-rule.mdc\n    output: \"Correctly placed Cursor rule file\"\n\nmetadata:\n  priority: high\n  version: 1.0\n</rule>",
    "frontmatter": {
      "title": "Cursor Rules Location",
      "provenance": "https://ghuntley.com/stdlib/",
      "description": "Rules for creating and organizing rules files for Cursor",
      "globs": "*.mdc",
      "target": ".cursor/rules/tailwind-css-v4.mdc",
      "tags": [
        "tool:cursor"
      ]
    },
    "tags": [
      "tool:cursor"
    ],
    "provenance": "https://ghuntley.com/stdlib/",
    "targetFile": ".cursor/rules/tailwind-css-v4.mdc",
    "createdAt": "2025-02-13T17:59:08+02:00",
    "attributedGitHubUser": "ghuntley",
    "attributedXUser": null
  },
  {
    "title": "Clojure Style Guide",
    "description": "Apply Clojure style conventions to ensure code is clear, consistent, and maintainable",
    "content": "# Clojure Style Guide\n\nA concise summary of key Clojure style conventions for LLM context.\n\n## Source Code Layout\n\n- Use spaces for indentation (2 spaces)\n- Limit lines to 80 characters where feasible\n- Use Unix-style line endings\n- One namespace per file\n- Terminate files with newline\n- No trailing whitespace\n- Empty line between top-level forms\n- No blank lines within definition forms\n\n## Naming Conventions\n\n- Use `lisp-case` for functions and variables: `(def some-var)`, `(defn some-fun)`\n- Use `CapitalCase` for protocols, records, structs, types: `(defprotocol MyProtocol)`\n- End predicate function names with `?`: `(defn palindrome?)`\n- End unsafe transaction functions with `!`: `(defn reset!)`\n- Use `->` for conversion functions: `(defn f->c)`\n- Use `*earmuffs*` for dynamic vars: `(def ^:dynamic *db*)`\n- Use `_` for unused bindings: `(fn [_ b] b)`\n\n## Namespace Conventions\n\n- No single-segment namespaces\n- Prefer `:require` over `:use`\n- Common namespace aliases:\n  - `[clojure.string :as str]`\n  - `[clojure.java.io :as io]`\n  - `[clojure.edn :as edn]`\n  - `[clojure.walk :as walk]`\n  - `[clojure.zip :as zip]`\n  - `[clojure.data.json :as json]`\n\n## Function Style\n\n```clojure\n;; Good function style examples\n(defn foo \n  \"Docstring goes here.\"\n  [x]\n  (bar x))\n\n;; Multiple arity - align args\n(defn foo\n  \"I have two arities.\"\n  ([x]\n   (foo x 1))\n  ([x y]\n   (+ x y)))\n\n;; Threading macros for readability\n(-> person\n    :address\n    :city\n    str/upper-case)\n\n(->> items\n     (filter active?)\n     (map :name)\n     (into []))\n```\n\n## Collections\n\n- Prefer vectors `[]` over lists `()` for sequences\n- Use keywords for map keys: `{:name \"John\" :age 42}`\n- Use sets as predicates: `(filter #{:a :b} coll)`\n- Prefer `vec` over `into []`\n- Avoid Java collections/arrays\n\n## Common Idioms\n\n```clojure\n;; Use when instead of (if x (do ...))\n(when test\n  (do-this)\n  (do-that))\n\n;; Use if-let for conditional binding\n(if-let [val (may-return-nil)]\n  (do-something val)\n  (handle-nil-case))\n\n;; Use cond with :else\n(cond\n  (neg? n) \"negative\"\n  (pos? n) \"positive\"\n  :else \"zero\")\n\n;; Use case for constants\n(case day\n  :mon \"Monday\"\n  :tue \"Tuesday\"\n  \"unknown\")\n```\n\n## Documentation\n\n- Start docstrings with complete sentence\n- Use Markdown in docstrings\n- Document all function arguments with backticks\n- Reference vars with backticks: `clojure.core/str`\n- Link to other vars with `[[var-name]]`\n\n## Testing\n\n- Put tests in `test/` directory \n- Name test namespaces `*.test`\n- Name tests with `-test` suffix\n- Use `deftest` macro\n\n## Common Metadata\n\n```clojure\n;; Version added\n(def ^{:added \"1.0\"} foo 42)\n\n;; Deprecation\n(def ^{:deprecated \"2.0\"} old-foo 42)\n\n;; No documentation\n(def ^:no-doc internal-thing 42)\n\n;; Private\n(def ^:private secret 42)\n```",
    "frontmatter": {
      "title": "Clojure Style Guide",
      "description": "Apply Clojure style conventions to ensure code is clear, consistent, and maintainable",
      "provenance": "Distilled by an LLM from the source material at guide.clojure.style",
      "tags": [
        "lang:clojure"
      ]
    },
    "tags": [
      "lang:clojure"
    ],
    "provenance": "Distilled by an LLM from the source material at guide.clojure.style",
    "createdAt": "2025-02-11T11:33:12+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "Concrete CSS",
    "description": "Embed classless CSS for dark mode support and semantic styling using Concrete.css stylesheet",
    "content": "# Concrete CSS\n\nConcrete.css is a lightweight, classless CSS stylesheet focused on simplicity. It provides automatic dark theme support and serves as an excellent foundation for basic websites.\n\n## Key Features\n- Classless styling - just use semantic HTML elements\n- Automatic dark mode support\n- Centered layout with max-width 640px using `<main>`\n- Clean typography and basic element styling\n- Minimal footprint\n\n## Usage\n\nAdd to HTML:\n```html\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/concrete.css/3.0.0/concrete.min.css\">\n```\n\nOr install via npm:\n```bash\nnpm install concrete.css\n```\nThen import:\n```javascript\nimport 'concrete.css'\n```\n\n## Structure Examples\n\nBasic page layout:\n```html\n<body>\n  <header>\n    <h1>Page Title</h1>\n  </header>\n  \n  <main>\n    <section>\n      <h2>Section Title</h2>\n      <p>Content goes here...</p>\n    </section>\n  </main>\n\n  <footer>\n    <p>Footer content</p>\n  </footer>\n</body>\n```\n\nNavigation:\n```html\n<nav>\n  <ul>\n    <li>ProjectName</li>\n    <li><a href=\"#home\">Home</a></li>\n    <li><a href=\"#docs\">Docs</a></li>\n  </ul>\n</nav>\n```\n\nForms:\n```html\n<form>\n  <label for=\"name\">Name:</label>\n  <input type=\"text\" id=\"name\">\n  \n  <label for=\"os\">Operating System:</label>\n  <select id=\"os\">\n    <option>Linux</option>\n    <option>MacOS</option>\n    <option>Windows</option>\n  </select>\n  \n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n## concrete.css notes\n\n- Please don't customize the CSS colors uneccessarily as concrete.css provides sensible defaults in both light and dark mode.\n- If you need to add colours to something bear in mind they should work against both light and dark backgrounds.\n- Concrete has CSS variables `var(--fg)` and `var(--bg)` which you can use to set the foreground and background colors for elements.\n- Basic centering and flexbox or grid layouts are fine if you need to position things.\n- You can extra colours or embellishments when creating UIs that go beyond the basic concrete styles. Try to keep with the minimalist aesthetic.",
    "frontmatter": {
      "title": "Concrete CSS",
      "description": "Embed classless CSS for dark mode support and semantic styling using Concrete.css stylesheet"
    },
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "Nostr Protocol Tools (nostr-tools)",
    "description": "Develop Nostr clients using nostr-tools for cryptographic operations and relay interactions",
    "content": "Tools for developing [Nostr](https://github.com/fiatjaf/nostr) clients.\n\nOnly depends on _@scure_ and _@noble_ packages.\n\nThis package is only providing lower-level functionality. If you want more higher-level features, take a look at [Nostrify](https://nostrify.dev), or if you want an easy-to-use fully-fledged solution that abstracts the hard parts of Nostr and makes decisions on your behalf, take a look at [NDK](https://github.com/nostr-dev-kit/ndk) and [@snort/system](https://www.npmjs.com/package/@snort/system).\n\n## Installation\n\n```bash\n# npm\nnpm install --save nostr-tools\n\n# jsr\nnpx jsr add @nostr/tools\n```\n\nIf using TypeScript, this package requires TypeScript >= 5.0.\n\n## Documentation\n\nhttps://jsr.io/@nostr/tools/doc\n\n## Usage\n\n### Generating a private key and a public key\n\n```js\nimport { generateSecretKey, getPublicKey } from 'nostr-tools/pure'\n\nlet sk = generateSecretKey() // `sk` is a Uint8Array\nlet pk = getPublicKey(sk) // `pk` is a hex string\n```\n\nTo get the secret key in hex format, use\n\n```js\nimport { bytesToHex, hexToBytes } from '@noble/hashes/utils' // already an installed dependency\n\nlet skHex = bytesToHex(sk)\nlet backToBytes = hexToBytes(skHex)\n```\n\n### Creating, signing and verifying events\n\n```js\nimport { finalizeEvent, verifyEvent } from 'nostr-tools/pure'\n\nlet event = finalizeEvent({\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [],\n  content: 'hello',\n}, sk)\n\nlet isGood = verifyEvent(event)\n```\n\n### Interacting with a relay\n\n```js\nimport { finalizeEvent, generateSecretKey, getPublicKey } from 'nostr-tools/pure'\nimport { Relay } from 'nostr-tools/relay'\n\nconst relay = await Relay.connect('wss://relay.example.com')\nconsole.log(`connected to ${relay.url}`)\n\n// let's query for an event that exists\nconst sub = relay.subscribe([\n  {\n    ids: ['d7dd5eb3ab747e16f8d0212d53032ea2a7cadef53837e5a6c66d42849fcb9027'],\n  },\n], {\n  onevent(event) {\n    console.log('we got the event we wanted:', event)\n  },\n  oneose() {\n    sub.close()\n  }\n})\n\n// let's publish a new event while simultaneously monitoring the relay for it\nlet sk = generateSecretKey()\nlet pk = getPublicKey(sk)\n\nrelay.subscribe([\n  {\n    kinds: [1],\n    authors: [pk],\n  },\n], {\n  onevent(event) {\n    console.log('got event:', event)\n  }\n})\n\nlet eventTemplate = {\n  kind: 1,\n  created_at: Math.floor(Date.now() / 1000),\n  tags: [],\n  content: 'hello world',\n}\n\n// this assigns the pubkey, calculates the event id and signs the event in a single step\nconst signedEvent = finalizeEvent(eventTemplate, sk)\nawait relay.publish(signedEvent)\n\nrelay.close()\n```\n\nTo use this on Node.js you first must install `ws` and call something like this:\n\n```js\nimport { useWebSocketImplementation } from 'nostr-tools/pool'\n// or import { useWebSocketImplementation } from 'nostr-tools/relay' if you're using the Relay directly\n\nimport WebSocket from 'ws'\nuseWebSocketImplementation(WebSocket)\n```\n\n### Interacting with multiple relays\n\n```js\nimport { SimplePool } from 'nostr-tools/pool'\n\nconst pool = new SimplePool()\n\nlet relays = ['wss://relay.example.com', 'wss://relay.example2.com']\n\nlet h = pool.subscribeMany(\n  [...relays, 'wss://relay.example3.com'],\n  [\n    {\n      authors: ['32e1827635450ebb3c5a7d12c1f8e7b2b514439ac10a67eef3d9fd9c5c68e245'],\n    },\n  ],\n  {\n    onevent(event) {\n      // this will only be called once the first time the event is received\n      // ...\n    },\n    oneose() {\n      h.close()\n    }\n  }\n)\n\nawait Promise.any(pool.publish(relays, newEvent))\nconsole.log('published to at least one relay!')\n\nlet events = await pool.querySync(relays, { kinds: [0, 1] })\nlet event = await pool.get(relays, {\n  ids: ['44e1827635450ebb3c5a7d12c1f8e7b2b514439ac10a67eef3d9fd9c5c68e245'],\n})\n```\n\n### Parsing references (mentions) from a content using NIP-10 and NIP-27\n\n```js\nimport { parseReferences } from 'nostr-tools/references'\n\nlet references = parseReferences(event)\nlet simpleAugmentedContent = event.content\nfor (let i = 0; i < references.length; i++) {\n  let { text, profile, event, address } = references[i]\n  let augmentedReference = profile\n    ? `<strong>@${profilesCache[profile.pubkey].name}</strong>`\n    : event\n    ? `<em>${eventsCache[event.id].content.slice(0, 5)}</em>`\n    : address\n    ? `<a href=\"${text}\">[link]</a>`\n    : text\n  simpleAugmentedContent.replaceAll(text, augmentedReference)\n}\n```\n\n### Querying profile data from a NIP-05 address\n\n```js\nimport { queryProfile } from 'nostr-tools/nip05'\n\nlet profile = await queryProfile('jb55.com')\nconsole.log(profile.pubkey)\n// prints: 32e1827635450ebb3c5a7d12c1f8e7b2b514439ac10a67eef3d9fd9c5c68e245\nconsole.log(profile.relays)\n// prints: [wss://relay.damus.io]\n```\n\nTo use this on Node.js < v18, you first must install `node-fetch@2` and call something like this:\n\n```js\nimport { useFetchImplementation } from 'nostr-tools/nip05'\nuseFetchImplementation(require('node-fetch'))\n```\n\n### Including NIP-07 types\n```js\nimport type { WindowNostr } from 'nostr-tools/nip07'\n\ndeclare global {\n  interface Window {\n    nostr?: WindowNostr;\n  }\n}\n```\n\n\n### Generating NIP-06 keys\n```js\nimport {\n  privateKeyFromSeedWords,\n  accountFromSeedWords,\n  extendedKeysFromSeedWords,\n  accountFromExtendedKey\n} from 'nostr-tools/nip06'\n\nconst mnemonic = 'zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo zoo wrong'\nconst passphrase = '123' // optional\nconst accountIndex = 0\nconst sk0 = privateKeyFromSeedWords(mnemonic, passphrase, accountIndex)\n\nconst { privateKey: sk1, publicKey: pk1 } = accountFromSeedWords(mnemonic, passphrase, accountIndex)\n\nconst extendedAccountIndex = 0\n\nconst { privateExtendedKey, publicExtendedKey } = extendedKeysFromSeedWords(mnemonic, passphrase, extendedAccountIndex)\n\nconst { privateKey: sk2, publicKey: pk2 } = accountFromExtendedKey(privateExtendedKey)\n\nconst { publicKey: pk3 } = accountFromExtendedKey(publicExtendedKey)\n```\n\n### Encoding and decoding NIP-19 codes\n\n```js\nimport { generateSecretKey, getPublicKey } from 'nostr-tools/pure'\nimport * as nip19 from 'nostr-tools/nip19'\n\nlet sk = generateSecretKey()\nlet nsec = nip19.nsecEncode(sk)\nlet { type, data } = nip19.decode(nsec)\nassert(type === 'nsec')\nassert(data === sk)\n\nlet pk = getPublicKey(generateSecretKey())\nlet npub = nip19.npubEncode(pk)\nlet { type, data } = nip19.decode(npub)\nassert(type === 'npub')\nassert(data === pk)\n\nlet pk = getPublicKey(generateSecretKey())\nlet relays = ['wss://relay.nostr.example.mydomain.example.com', 'wss://nostr.banana.com']\nlet nprofile = nip19.nprofileEncode({ pubkey: pk, relays })\nlet { type, data } = nip19.decode(nprofile)\nassert(type === 'nprofile')\nassert(data.pubkey === pk)\nassert(data.relays.length === 2)\n```\n\n### Using it with `nostr-wasm`\n\n[`nostr-wasm`](https://github.com/fiatjaf/nostr-wasm) is a thin wrapper over [libsecp256k1](https://github.com/bitcoin-core/secp256k1) compiled to WASM just for hashing, signing and verifying Nostr events.\n\n```js\nimport { setNostrWasm, generateSecretKey, finalizeEvent, verifyEvent } from 'nostr-tools/wasm'\nimport { initNostrWasm } from 'nostr-wasm'\n\n// make sure this promise resolves before your app starts calling finalizeEvent or verifyEvent\ninitNostrWasm().then(setNostrWasm)\n\n// or use 'nostr-wasm/gzipped' or even 'nostr-wasm/headless',\n// see https://www.npmjs.com/package/nostr-wasm for options\n```\n\nIf you're going to use `Relay` and `SimplePool` you must also import `nostr-tools/abstract-relay` and/or `nostr-tools/abstract-pool` instead of the defaults and then instantiate them by passing the `verifyEvent`:\n\n```js\nimport { setNostrWasm, verifyEvent } from 'nostr-tools/wasm'\nimport { AbstractRelay } from 'nostr-tools/abstract-relay'\nimport { AbstractSimplePool } from 'nostr-tools/abstract-pool'\nimport { initNostrWasm } from 'nostr-wasm'\n\ninitNostrWasm().then(setNostrWasm)\n\nconst relay = AbstractRelay.connect('wss://relayable.org', { verifyEvent })\nconst pool = new AbstractSimplePool({ verifyEvent })\n```\n\nThis may be faster than the pure-JS [noble libraries](https://paulmillr.com/noble/) used by default and in `nostr-tools/pure`. Benchmarks:\n\n```\nbenchmark      time (avg)             (min … max)       p75       p99      p995\n------------------------------------------------- -----------------------------\n• relay read message and verify event (many events)\n------------------------------------------------- -----------------------------\nwasm        34.94 ms/iter   (34.61 ms … 35.73 ms)  35.07 ms  35.73 ms  35.73 ms\npure js     239.7 ms/iter (235.41 ms … 243.69 ms) 240.51 ms 243.69 ms 243.69 ms\ntrusted    402.71 µs/iter   (344.57 µs … 2.98 ms) 407.39 µs 745.62 µs 812.59 µs\n\nsummary for relay read message and verify event\n  wasm\n   86.77x slower than trusted\n   6.86x faster than pure js\n```\n\n### Using from the browser (if you don't want to use a bundler)\n\n```html\n<script src=\"https://unpkg.com/nostr-tools/lib/nostr.bundle.js\"></script>\n<script>\n  window.NostrTools.generateSecretKey('...') // and so on\n</script>\n```\n\n## Plumbing\n\nTo develop `nostr-tools`, install [`just`](https://just.systems/) and run `just -l` to see commands available.\n\n## License\n\nThis is free and unencumbered software released into the public domain. By submitting patches to this project, you agree to dedicate any and all copyright interest in this software to the public domain.\n\n## Contributing to this repository\n\nUse NIP-34 to send your patches to:\n\n```\nnaddr1qq9kummnw3ez6ar0dak8xqg5waehxw309aex2mrp0yhxummnw3ezucn8qyt8wumn8ghj7un9d3shjtnwdaehgu3wvfskueqpzemhxue69uhhyetvv9ujuurjd9kkzmpwdejhgq3q80cvv07tjdrrgpa0j7j7tmnyl2yr6yr7l8j4s3evf6u64th6gkwsxpqqqpmejdv00jq\n```",
    "frontmatter": {
      "title": "Nostr Protocol Tools (nostr-tools)",
      "description": "Develop Nostr clients using nostr-tools for cryptographic operations and relay interactions"
    },
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "Using Playwright from ClojureScript",
    "description": "Automate browser interactions for end-to-end testing with Playwright in ClojureScript",
    "content": "Playwright is a library for controlling the browser and can be used in ClojureScript.\n\nHere's an example of requiring it:\n\n```clojure\n(ns e2e\n  (:require\n    [\"playwright$default\" :as pw]))\n```\n\nCreate an instance to use like this:\n\n```clojure\n(t/use-fixtures\n  :once\n  {:before\n   #(async\n      done\n      (p/let [browser (.launch pw/chromium #js {:headless false})\n              context (.newContext browser)\n              page (.newPage context)]\n        ; reset the test db\n        (reset! rig {:page page :browser browser :base-url (str \"http://localhost:8000\")})\n        (done)))\n   :after\n   #(async\n      done\n      (p/let [{:keys [browser server]} @rig]\n        (.close browser)\n        (when server\n          (.kill server))\n        (done)))})\n```\n\nHere's an example of waiting for a page to load:\n\n```clojure\n(defn wait-for-page\n  [page base-url url]\n  (-> page (.waitForNavigation\n             #js {:url (str base-url url)\n                  :waitUntil \"networkidle\"})))\n```\n\nFind an element with some text and check it contains that text:\n\n```clojure\n(defn ensure-content [page pre-selector txt]\n  (p/let [content\n          (-> page (.locator\n                     (str pre-selector \":has-text('\" txt \"')\"))\n              .textContent)]\n    (is (includes? content txt))))\n```\n\nCheck if a locator found anything:\n\n```clojure\n(p/-> page (.locator \"hello\") (.count) #(> % 0)\n```\n\nA basic test using playwright:\n\n```clojure\n(deftest homepage-content-check\n  (t/testing \"Checking homepage for some text.\"\n    (async\n      done\n      (p/let [{:keys [page base-url]} @rig]\n        (p/all [(.goto page base-url)\n                (wait-for-page page base-url \"/\")])\n        ; Check for some text\n        (ensure-content page \"section.hero\" \"Some text)))))\n```\n\nRun all tests in the file:\n\n```clojure\n(t/run-tests 'e2e)\n```\n\nYou can often find the HTML IDs or classes required to locate elements for e2e tests by inspecting the Hiccup forms in the app source code.",
    "frontmatter": {
      "title": "Using Playwright from ClojureScript",
      "provenance": "hand written",
      "description": "Automate browser interactions for end-to-end testing with Playwright in ClojureScript",
      "tags": [
        "lang:clojure"
      ]
    },
    "tags": [
      "lang:clojure"
    ],
    "provenance": "hand written",
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "ClojureScript and Reagent",
    "description": "Enhance ClojureScript applications using Reagent for improved data management and UI rendering efficiency",
    "content": "# ClojureScript and Reagent\n\nYou are an expert ClojureScript developer.\n\nYou will be working on a code base containing ClojureScript.\n\nThe Reagent library is available for rendering the interface with React.\nStrongly prefer Reagent style data manipulation and native Clojure functions and macros such as `swap!` instead of React functions like `useEffect`.\n\nPlease don't use outdated React lifecycle hooks like `:component-did-mount` - instead you should prefer the `:ref` attribute which takes a function that is passed a dom element when it is mounted `nil` when it is unmounted.\nYou can replace lifecycle hooks with this.\nThe outdated `rdom/dom-node` function is now DEPRECATED.\nPlease use the element passed to the `:ref` function directly as it is already a dom node.\nYou can also use `js/document.querySelector` to access dom nodes directly.\n\nALWAYS use the most current Reagent and ClojureScript best practices, avoiding deprecated methods and lifecycle hooks.",
    "frontmatter": {
      "title": "ClojureScript and Reagent",
      "provenance": "hand-written",
      "description": "Enhance ClojureScript applications using Reagent for improved data management and UI rendering efficiency",
      "tags": [
        "lang:clojure",
        "lib:react"
      ]
    },
    "tags": [
      "lang:clojure",
      "lib:react"
    ],
    "provenance": "hand-written",
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "IDB Keyval API",
    "description": "Implement a promise-based key-value store with IndexedDB using IDB Keyval API functions",
    "content": "# IDB Keyval documentation\n\nThis is a super-simple promise-based keyval store implemented with IndexedDB, originally based on async-storage by Mozilla.\n\n## Install\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/idb-keyval@6/dist/umd.js\"></script>\n```\n```shell\nnpm install idb-keyval\n```\n```\nimport { get, set } from 'idb-keyval';\n```\n\n## Usage\n\n### set:\n\n```js\nimport { set } from 'idb-keyval';\n\nset('hello', 'world');\n```\n\nSince this is IDB-backed, you can store anything structured-clonable (numbers, arrays, objects, dates, blobs etc), although old Edge doesn't support `null`. Keys can be numbers, strings, `Date`s, (IDB also allows arrays of those values, but IE doesn't support it).\n\nAll methods return promises:\n\n```js\nimport { set } from 'idb-keyval';\n\nset('hello', 'world')\n  .then(() => console.log('It worked!'))\n  .catch((err) => console.log('It failed!', err));\n```\n\n### get:\n\n```js\nimport { get } from 'idb-keyval';\n\n// logs: \"world\"\nget('hello').then((val) => console.log(val));\n```\n\nIf there is no 'hello' key, then `val` will be `undefined`.\n\n### setMany:\n\nSet many keyval pairs at once. This is faster than calling `set` multiple times.\n\n```js\nimport { set, setMany } from 'idb-keyval';\n\n// Instead of:\nPromise.all([set(123, 456), set('hello', 'world')])\n  .then(() => console.log('It worked!'))\n  .catch((err) => console.log('It failed!', err));\n\n// It's faster to do:\nsetMany([\n  [123, 456],\n  ['hello', 'world'],\n])\n  .then(() => console.log('It worked!'))\n  .catch((err) => console.log('It failed!', err));\n```\n\nThis operation is also atomic – if one of the pairs can't be added, none will be added.\n\n### getMany:\n\nGet many keys at once. This is faster than calling `get` multiple times. Resolves with an array of values.\n\n```js\nimport { get, getMany } from 'idb-keyval';\n\n// Instead of:\nPromise.all([get(123), get('hello')]).then(([firstVal, secondVal]) =>\n  console.log(firstVal, secondVal),\n);\n\n// It's faster to do:\ngetMany([123, 'hello']).then(([firstVal, secondVal]) =>\n  console.log(firstVal, secondVal),\n);\n```\n\n### update:\n\nTransforming a value (eg incrementing a number) using `get` and `set` is risky, as both `get` and `set` are async and non-atomic:\n\n```js\n// Don't do this:\nimport { get, set } from 'idb-keyval';\n\nget('counter').then((val) =>\n  set('counter', (val || 0) + 1);\n);\n\nget('counter').then((val) =>\n  set('counter', (val || 0) + 1);\n);\n```\n\nWith the above, both `get` operations will complete first, each returning `undefined`, then each set operation will be setting `1`. You could fix the above by queuing the second `get` on the first `set`, but that isn't always feasible across multiple pieces of code. Instead:\n\n```js\n// Instead:\nimport { update } from 'idb-keyval';\n\nupdate('counter', (val) => (val || 0) + 1);\nupdate('counter', (val) => (val || 0) + 1);\n```\n\nThis will queue the updates automatically, so the first `update` set the `counter` to `1`, and the second `update` sets it to `2`.\n\n### del:\n\nDelete a particular key from the store.\n\n```js\nimport { del } from 'idb-keyval';\n\ndel('hello');\n```\n\n### delMany:\n\nDelete many keys at once. This is faster than calling `del` multiple times.\n\n```js\nimport { del, delMany } from 'idb-keyval';\n\n// Instead of:\nPromise.all([del(123), del('hello')])\n  .then(() => console.log('It worked!'))\n  .catch((err) => console.log('It failed!', err));\n\n// It's faster to do:\ndelMany([123, 'hello'])\n  .then(() => console.log('It worked!'))\n  .catch((err) => console.log('It failed!', err));\n```\n\n### clear:\n\nClear all values in the store.\n\n```js\nimport { clear } from 'idb-keyval';\n\nclear();\n```\n\n### entries:\n\nGet all entries in the store. Each entry is an array of `[key, value]`.\n\n```js\nimport { entries } from 'idb-keyval';\n\n// logs: [[123, 456], ['hello', 'world']]\nentries().then((entries) => console.log(entries));\n```\n\n### keys:\n\nGet all keys in the store.\n\n```js\nimport { keys } from 'idb-keyval';\n\n// logs: [123, 'hello']\nkeys().then((keys) => console.log(keys));\n```\n\n### values:\n\nGet all values in the store.\n\n```js\nimport { values } from 'idb-keyval';\n\n// logs: [456, 'world']\nvalues().then((values) => console.log(values));\n```\n\n### Custom stores:\n\nBy default, the methods above use an IndexedDB database named `keyval-store` and an object store named `keyval`. If you want to use something different, see [custom stores](https://www.jsdelivr.com/package/npm/custom-stores.md).",
    "frontmatter": {
      "title": "IDB Keyval API",
      "provenance": "created using aider conventions",
      "description": "Implement a promise-based key-value store with IndexedDB using IDB Keyval API functions"
    },
    "provenance": "created using aider conventions",
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "Efficient JavaScript Interop in ClojureScript",
    "description": "Facilitate JavaScript interop using ClojureScript functions optimized for JavaScript environments",
    "content": "# js-interop\n\n## Overview\n`js-interop` is a ClojureScript library facilitating JavaScript interop by mirroring core Clojure functions adapted for JavaScript contexts.\n\n## Key Features\n- **Core Operations**: `get`, `get-in`, `assoc!`, `assoc-in!`, `update!`, `update-in!`, `select-keys`.\n- **Key Types**: Supports static keys (keywords) and renamable keys (`.-keyName`).\n- **Destructuring**: Use `^js` metadata with `j/let`, `j/fn`, and `j/defn` for JS-specific bindings.\n- **Mutation**: Functions mutate objects and return the original for easy threading.\n- **Host-interop Keys**: Allow keys to be renamed by the Closure compiler.\n- **Wrappers**: Includes utilities like `j/push!`, `j/unshift!`, `j/call`, `j/apply`, `j/call-in`, `j/apply-in`.\n- **Object/Array Creation**: `j/obj` for literal objects, `j/lit` for nested structures with support for unquote-splicing.\n- **Threading**: Designed to work seamlessly with Clojure’s threading macros.\n\n## Usage Examples\n\n### Reading\n```clojure\n(j/get obj :x)\n(j/get obj :x default-value)\n(j/get-in obj [:x :y])\n(j/select-keys obj [:x :z])\n```\n\n### Destructuring\n```clojure\n(j/let [^js {:keys [x y]} obj]\n  ...)\n```\n\n### Mutation\n```clojure\n(j/assoc! obj :x 10)\n(j/update! obj :x inc)\n```\n\n### Host-interop Keys\n```clojure\n(j/get obj .-x)\n(j/assoc! obj .-a 1)\n```\n\n### Wrappers\n```clojure\n(j/call o :someFunction 10)\n(j/apply o :someFunction #js[1 2 3])\n```\n\n### Object Creation\n```clojure\n(j/obj :a 1 .-b 2)\n(j/lit {:a 1 .-b [2 3]})\n```\n\n## Best Practices\n- Use `^js` to opt-in to JS interop in destructuring.\n- Utilize mutation functions for efficient object updates.\n- Leverage threading with interop functions for readable code flows.",
    "frontmatter": {
      "title": "Efficient JavaScript Interop in ClojureScript",
      "description": "Facilitate JavaScript interop using ClojureScript functions optimized for JavaScript environments",
      "tags": [
        "lang:clojure"
      ]
    },
    "tags": [
      "lang:clojure"
    ],
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "Node.js ClojureScript runtime (nbb)",
    "description": "Execute ad-hoc Node.js scripts using the ClojureScript runtime nbb for enhanced efficiency",
    "content": "# Node.js ClojureScript runtime (nbb)\n\n`nbb` is a ClojureScript runtime that runs on Node.js for doing ad-hoc scripting.\n\nYou can import and use Node libraries and internals like this:\n\n```clojure\n(ns example\n  (:require [\"csv-parse/sync\" :as csv]\n            [\"fs\" :as fs]\n            [\"path\" :as path]\n            [\"shelljs$default\" :as sh]\n            [\"term-size$default\" :as term-size]\n            [\"zx\" :refer [$]]\n            [\"zx$fs\" :as zxfs]\n            [nbb.core :refer [*file*]]))\n\n(prn (path/resolve \".\"))\n\n(prn (term-size))\n\n(println (count (str (fs/readFileSync *file*))))\n\n(prn (sh/ls \".\"))\n\n(prn (csv/parse \"foo,bar\"))\n\n(prn (zxfs/existsSync *file*))\n\n($ #js [\"ls\"])\n```\n\nThe Reagent library is available with `[reagent.core :as r]` and you can render hiccup to HTML using e.g. `r/render-to-static-markup`.\n\nThe promesa library is available with `[promesa.core :as p]`.\n\nThe js-interop library is available with `[applied-science.js-interop :as j]`.\n\nThe Clojure `tools.cli` library is also available if you need to write command line utilities and display usage etc.\n\nYou can use `js/fetch` to access JavaScript's native `fetch` function.\n\nTo access datastructures returned by native JS calls (like `js/fetch`) you will need to use `aget` or `j/get` rather than `get`.\n\nA basic main file:\n\n```clojure\n(ns example\n  (:require\n    [nbb.core :refer [*file* invoked-file]]))\n\n(defn main [args]\n  ; ... do something\n  )\n\n(when (= *file* (invoked-file))\n  (main (j/get process :argv)))\n```",
    "frontmatter": {
      "title": "Node.js ClojureScript runtime (nbb)",
      "description": "Execute ad-hoc Node.js scripts using the ClojureScript runtime nbb for enhanced efficiency",
      "tags": [
        "lang:clojure"
      ]
    },
    "tags": [
      "lang:clojure"
    ],
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "Aider ClojureScript Conventions",
    "description": "Configure aider to use custom ClojureScript conventions files for enhanced LLM context recognition",
    "content": "These are conventions files I use with [aider](https://aider.chat) to give the LLM context about ClojureScript technologies.\n\nThese were mostly scraped from project documentation pages with [`aider-conventions-scraper`](https://gist.github.com/chr15m/1e52c9a246c2f8867325db3dd7085cd4). You can use that tool to create your own concise conventions files from documentation pages.\n\nYou can configure aider to use your conventions file (in `~/.aider.conf.yml`):\n\n```yaml\nread: [CONVENTIONS.md]\n```\n\nThen append one or more of these to that file before you start aider.",
    "frontmatter": {
      "description": "Configure aider to use custom ClojureScript conventions files for enhanced LLM context recognition"
    },
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "virtual-audio-graph library",
    "description": "Manage Web Audio API nodes declaratively with JavaScript using the virtual-audio-graph library",
    "content": "# Virtual Audio Graph\n\nA declarative Web Audio API library inspired by React's virtual DOM approach.\n\n## Core Concepts\n\n- Create a virtual audio graph instance that manages Web Audio nodes\n- Declaratively specify audio node connections and parameters\n- Updates handle all imperative Web Audio API operations automatically\n\n## Basic Usage\n\n```javascript\nimport createVirtualAudioGraph, {\n  oscillator,\n  gain,\n  OUTPUT\n} from 'virtual-audio-graph'\n\n// Create instance\nconst virtualAudioGraph = createVirtualAudioGraph()\n\n// Update the audio graph\nvirtualAudioGraph.update({\n  0: gain(OUTPUT, { gain: 0.5 }),\n  1: oscillator(0, { \n    frequency: 440,\n    stopTime: virtualAudioGraph.currentTime + 1 \n  })\n})\n```\n\n## Key Features\n\n- Node connections specified via IDs\n- AudioParam automation via method arrays\n- Custom node creation for reusable components\n- Support for AudioWorklet nodes\n- Works with both AudioContext and OfflineAudioContext\n\n## Custom Node Example\n\n```javascript\nconst customOsc = createNode(({\n  frequency,\n  startTime,\n  stopTime\n}) => ({\n  0: gain(OUTPUT, {\n    gain: [\n      ['setValueAtTime', 0, startTime],\n      ['linearRampToValueAtTime', 1, startTime + 0.1],\n      ['linearRampToValueAtTime', 0, stopTime]\n    ]\n  }),\n  1: oscillator(0, { frequency, startTime, stopTime })\n}))\n\nvirtualAudioGraph.update({\n  0: customOsc(OUTPUT, {\n    frequency: 440,\n    startTime: currentTime,\n    stopTime: currentTime + 1\n  })\n})\n```\n\n## Best Practices\n\n- Use custom nodes to encapsulate reusable audio components\n- Leverage AudioParam automation for smooth parameter changes\n- Clean up by updating with an empty graph `{}`\n- Use unique numeric IDs for nodes\n- Connect nodes via their IDs or special OUTPUT constant\n\n## API Reference\n\n### Core Functions\n\n- `createVirtualAudioGraph({audioContext?, output?})` - Create a new virtual audio graph instance\n- `createNode(fn)` - Create a custom virtual audio node\n- `createWorkletNode(name)` - Create an AudioWorklet node\n\n### Instance Methods\n\n- `virtualAudioGraph.update(graphDefinition)` - Update the audio graph\n- `virtualAudioGraph.currentTime` - Get current audio context time\n- `virtualAudioGraph.getAudioNodeById(id)` - Get AudioNode by ID\n\n### Standard Node Types\n\n- `analyser` - AnalyserNode\n- `biquadFilter` - BiquadFilterNode \n- `bufferSource` - AudioBufferSourceNode\n- `channelMerger` - ChannelMergerNode\n- `channelSplitter` - ChannelSplitterNode\n- `convolver` - ConvolverNode\n- `delay` - DelayNode\n- `dynamicsCompressor` - DynamicsCompressorNode\n- `gain` - GainNode\n- `mediaElementSource` - MediaElementAudioSourceNode\n- `mediaStreamDestination` - MediaStreamAudioDestinationNode\n- `mediaStreamSource` - MediaStreamAudioSourceNode\n- `oscillator` - OscillatorNode\n- `panner` - PannerNode\n- `stereoPanner` - StereoPannerNode\n- `waveShaper` - WaveShaperNode\n\n### Special Constants\n\n- `OUTPUT` - Connect node to graph output\n- `NO_OUTPUT` - Node has no output connection\n\n### Node Parameters\n\nCommon parameters that can be passed to node constructors:\n\n- `startTime` - When to start the node\n- `stopTime` - When to stop the node\n- `gain` - Gain value (for GainNode)\n- `frequency` - Frequency value (for OscillatorNode)\n- `detune` - Detune value in cents\n- `type` - Oscillator type ('sine', 'square', 'sawtooth', 'triangle')\n- `delayTime` - Delay time in seconds\n- `maxDelayTime` - Maximum delay time\n- `buffer` - AudioBuffer for BufferSourceNode\n- `playbackRate` - Playback rate for BufferSourceNode\n\nParameters can be:\n- Simple values\n- Arrays of AudioParam method calls like `['setValueAtTime', value, time]`\n- Arrays of multiple method calls for complex automation\n\n## More Examples\n\n### Stopping All Audio\n\nTo stop all audio and remove all nodes, update with an empty graph:\n\n```javascript\nvirtualAudioGraph.update({})\n```\n\n### Complex Oscillator with Envelope\n\n```javascript\nconst { currentTime } = virtualAudioGraph\n\nvirtualAudioGraph.update({\n  0: gain(OUTPUT, {\n    gain: [\n      ['setValueAtTime', 0, currentTime],\n      ['linearRampToValueAtTime', 0.5, currentTime + 0.1],\n      ['exponentialRampToValueAtTime', 0.01, currentTime + 2]\n    ]\n  }),\n  1: oscillator(0, {\n    frequency: [\n      ['setValueAtTime', 440, currentTime],\n      ['linearRampToValueAtTime', 880, currentTime + 2]\n    ],\n    stopTime: currentTime + 2\n  })\n})\n```\n\n### Stereo Panning Example\n\n```javascript\nconst { currentTime } = virtualAudioGraph\n\nvirtualAudioGraph.update({\n  0: stereoPanner(OUTPUT, {\n    pan: [\n      ['setValueAtTime', -1, currentTime],\n      ['linearRampToValueAtTime', 1, currentTime + 2]\n    ]\n  }),\n  1: oscillator(0, {\n    frequency: 440,\n    stopTime: currentTime + 2\n  })\n})\n```\n\n### Working with Audio Files\n\n```javascript\n// Load audio file\nconst response = await fetch('sound.wav')\nconst arrayBuffer = await response.arrayBuffer()\nconst audioBuffer = await audioContext.decodeAudioData(arrayBuffer)\n\n// Play with effects\nvirtualAudioGraph.update({\n  0: gain(OUTPUT, { gain: 0.7 }),\n  1: delay(0, { delayTime: 0.3 }),\n  2: bufferSource([0, 1], {\n    buffer: audioBuffer,\n    playbackRate: 1.2,\n    startTime: virtualAudioGraph.currentTime\n  })\n})\n\n// Stop playback after 3 seconds\nsetTimeout(() => {\n  virtualAudioGraph.update({})\n}, 3000)\n```",
    "frontmatter": {
      "title": "virtual-audio-graph library",
      "provenance": "distilled from the documentation",
      "description": "Manage Web Audio API nodes declaratively with JavaScript using the virtual-audio-graph library"
    },
    "provenance": "distilled from the documentation",
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "Promesa (ClojureScript library)",
    "description": "Manage asynchronous programming in ClojureScript using Promesa for effective promise handling",
    "content": "# Promesa\n\nPromesa is a popular library for dealing with asynchronous programming using promises in Clojure and ClojureScript.\nUse the Promesa library for handling promises.\n\nNote: promesa macros like `p/let` and `p/do!` always return a promse which resolves on completion of the block, returning the reslut of the last expression.\nSo you don't have to wrap those macros and functions in a separate promise with it's own resolve handling.\n\n### Promesa examples\n\n```clojure\n(require '[promesa.core :as p])\n\n;; Handling errors\n;; Using async/await syntax (in ClojureScript or JVM with proper setup)\n(p/let [a (p/resolved 10)\n        b (p/resolved 20)]\n  (println \"The sum is:\" (+ a b)))\n\n(p/do!\n  (println \"Step 1: Starting something...\")\n  (p/delay 1000) ;; Simulate async delay\n  (println \"Step 2: Something after 1 second delay\")\n  (p/delay 500) ;; Another delay\n  (println \"Step 3: Another side effect after 500ms\"))\n\n;; Fetch example\n(p/let [req (js/fetch \"https//example.com/api.json\")\n        json (when (aget req \"ok\") (.json req))]\n        ; do something with the resulting JSON here\n        ; or handle nil when the request fails\n        )\n\n;; Combining multiple promises\n(p/let [[result-1 result-2 result-2]\n        (p/all [(p/resolved 1) (p/resolved 2) (p/resolved 3)])]\n\t\t(apply + [result-1 result-2 result3]))\n\n;; Simple promise chain\n(p/then\n  (p/resolved 42)\n  (fn [result]\n    (println \"The result is:\" result)))\n\n;; Catching errors\n(p/catch\n  (p/rejected (ex-info \"Something went wrong!\" {}))\n  (fn [err]\n    (println \"Caught an error:\" (.getMessage err))))\n```",
    "frontmatter": {
      "title": "Promesa (ClojureScript library)",
      "description": "Manage asynchronous programming in ClojureScript using Promesa for effective promise handling",
      "provenance": "hand-written",
      "tags": [
        "lang:clojure"
      ]
    },
    "tags": [
      "lang:clojure"
    ],
    "provenance": "hand-written",
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "Scittle ClojureScript",
    "description": "Develop a simple web app using Scittle ClojureScript with JavaScript to handle browser interactions",
    "content": "# Scittle ClojureScript\n\nI would like you to work on a simple web app using Scittle, a ClojureScript interpreter for the browser.\n\n- Scittle does not include the `goog` namespace or closure libraries so you will have to fall back on vanilla JavaScript browser functions and methods.\n- You can use libraries from cdnjs by including them in a script tag and using them with the `js/` prefix as needed. Scittle largely follows ClojureScript conventions.",
    "frontmatter": {
      "title": "Scittle ClojureScript",
      "description": "Develop a simple web app using Scittle ClojureScript with JavaScript to handle browser interactions",
      "tags": [
        "lang:clojure"
      ]
    },
    "tags": [
      "lang:clojure"
    ],
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "Standard",
    "description": "Modify ClojureScript files minimally to efficiently achieve specific programming task goals",
    "content": "# General guidance\n\n- Please modify files as minimally as possible to accomplish the task.\n- Don't make superfluous changes, whitespace changes, or changes to code that don't relate to the current goal.\n- In general when writing brand new code ALWAYS add some debugging print/log statements to check things are working the way you're expecting.\n\n# ClojureScript guidance\n\n- When doing frontend work assume the user already has the page open with a live-reloading server running and changes will be hot-loaded as you make them.\n- Use `aget` or `j/get` when operating on native JS data instead of cljs calls e.g. `(aget process \"env\" \"SMTP_SERVER\")`.\n- Remember `#js` is shallow. Use `j/lit` or `clj->js` to create deep JavaScript datastructures from ClojureScript.\n- Pay particular attention to whether datastructures are Clojure or JS. JS libraries will take and return only JS datastructures.\n- Lint all ClojureScript with the command `clj-kondo` e.g. `clj-kondo --lint FILENAME.cljs`.",
    "frontmatter": {
      "title": "Standard",
      "hidden": true,
      "description": "Modify ClojureScript files minimally to efficiently achieve specific programming task goals",
      "tags": [
        "lang:clojure"
      ]
    },
    "tags": [
      "lang:clojure"
    ],
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  },
  {
    "title": "Sitefox ClojureScript Framework",
    "description": "Develop web applications using Sitefox ClojureScript framework with Node.js for streamlined setups",
    "content": "# Sitefox\n\nSitefox is a ClojureScript web framework for Node.js, designed for rapid development with batteries included. It uses Express.js under the hood with sensible defaults.\n\n## Key Features\n\n- Web server & routing (Express.js based)\n- Server-side Reagent rendering\n- Database & key-value store (SQLite by default)\n- Sessions & authentication \n- Email sending\n- Form handling with CSRF protection\n- Logging and error handling\n- Live reloading\n\n## Code Examples\n\n### Basic Server Setup\n```clojure\n(ns webserver\n  (:require \n    [promesa.core :as p]\n    [sitefox.web :as web]\n    [sitefox.html :refer [render]]))\n\n(defn root [_req res]\n  (->> (render [:h1 \"Hello world!\"])\n       (.send res)))\n\n(p/let [[app host port] (web/start)]\n  (.get app \"/\" root)\n  (print \"Serving on\" (str \"http://\" host \":\" port)))\n```\n\n### Database Operations\n```clojure\n(ns myapp.db\n  (:require [sitefox.db :as db]\n            [promesa.core :as p]))\n\n;; Key-value store\n(p/let [table (db/kv \"sometable\")\n        _ (.set table \"key\" \"42\")\n        val (.get table \"key\")]\n  (println \"Value:\" val))\n\n;; Direct SQL\n(p/let [client (db/client)\n        rows (.query client \"SELECT * FROM sometable WHERE x = 1\")]\n  (println rows))\n```\n\n### Authentication Setup\n```clojure\n(defn setup-routes [app]\n  (let [template (fs/readFileSync \"index.html\")]\n    (web/reset-routes app)\n    (auth/setup-auth app)\n    (auth/setup-email-based-auth app template \"main\")\n    (auth/setup-reset-password app template \"main\")))\n```\n\n### Server-side Rendering\n```clojure\n(ns myapp.views\n  (:require [sitefox.html :refer [render-into]]))\n\n(defn component-main []\n  [:div\n   [:h1 \"Hello world!\"]\n   [:p \"Server-side rendered content\"]])\n\n(def html-string \n  (render-into (fs/readFileSync \"index.html\") \n               \"main\" \n               [component-main]))\n```\n\n### Form Handling with CSRF\n```clojure\n;; Server-side form component\n[:form {:method \"POST\" :action \"/submit\"}\n  [:input {:name \"_csrf\" \n           :type \"hidden\" \n           :default-value (.csrfToken req)}]\n  [:input {:name \"email\" :type \"email\"}]]\n\n;; Client-side AJAX POST\n(-> (fetch-csrf-token)\n    (.then (fn [token]\n             (js/fetch \"/api/endpoint\"\n                      #js {:method \"POST\"\n                           :headers #js {:Content-Type \"application/json\"\n                                       :X-XSRF-TOKEN token}\n                           :body (js/JSON.stringify data)}))))\n```\n\n### Email Sending\n```clojure\n(mail/send-email\n  \"to@example.com\"\n  \"from@example.com\"\n  \"Email Subject\"\n  :text \"Email body text\")\n```\n\n## Environment Variables\n\n- `PORT` - Web server port\n- `BIND_ADDRESS` - Web server bind address  \n- `SMTP_SERVER` - SMTP server URL\n- `DATABASE_URL` - Database connection URL (default: SQLite)\n- `SEND_CSRF_TOKEN` - Enable cookie-based CSRF tokens\n\n## Best Practices\n\n- Use Promesa for promise/async handling\n- Enable WAL mode for SQLite in production\n- Set up error handlers and logging early\n- Use the built-in CSRF protection for forms\n- Store user data keyed by user.id",
    "frontmatter": {
      "title": "Sitefox ClojureScript Framework",
      "description": "Develop web applications using Sitefox ClojureScript framework with Node.js for streamlined setups",
      "tags": [
        "lang:clojure"
      ]
    },
    "tags": [
      "lang:clojure"
    ],
    "createdAt": "2025-02-08T08:11:41+08:00",
    "attributedGitHubUser": "chr15m",
    "attributedXUser": null
  }
]
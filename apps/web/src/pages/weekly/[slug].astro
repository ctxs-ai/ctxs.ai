---
import type { GetStaticPaths } from 'astro';
import Layout from '@/layouts/Layout.astro';
import Page from '@/components/Page.astro';
import ContextView from '@/components/context.astro';
import { Post, Vote, User } from '@ctxs/db';
import { db } from '@/lib/db';
import WeeklyHeader from '@/components/weekly/WeeklyHeader.astro';
import { eq, sql, and, or } from 'drizzle-orm';
import { Logo } from '@/components/wordmark';
import { UpvoteButton } from '@/components/upvote-button';
import VideoGuides from '@/components/VideoGuides.astro';
import { authorImage } from '@/db/postHelpers';

type PostWithAuthor = {
  id: number;
  title: string | null;
  content: string;
  createdAt: Date;
  authorId: string;
  attributedGitHubUser: string | null;
  attributedXUser: string | null;
  sourceUrl: string | null;
  urn: string;
  slug: string;
  tags: string[];
  author: {
    id: string;
    name: string;
    image: string | null;
  } | null;
};

const userId = Astro.locals.user?.id;

const [post] = await db
  .select({
    id: Post.id,
    title: Post.title,
    description: Post.description,
    content: Post.content,
    createdAt: Post.createdAt,
    authorId: Post.authorId,
    attributedGitHubUser: Post.attributedGitHubUser,
    attributedXUser: Post.attributedXUser,
    sourceUrl: Post.sourceUrl,
    contentFormat: Post.contentFormat,
    provenance: Post.provenance,
    urn: Post.urn,
    slug: Post.slug,
    tags: Post.tags,
    voteCount: sql<number>`count(${Vote.id}) + ${Post.voteBump}`.as(
      'vote_count'
    ),
    author: {
      id: User.id,
      name: User.name,
      image: User.image,
      githubUserName: User.githubUserName,
    },
  })
  .from(Post)
  .where(
    or(
      eq(Post.slug, Astro.params.slug!),
      eq(Post.displayId, Astro.params.slug!)
    )
  )
  .leftJoin(User, eq(Post.authorId, User.id))
  .leftJoin(Vote, eq(Post.id, Vote.postId))
  .groupBy(Post.id, User.id);

if (post === undefined) {
  return Astro.redirect('/weekly');
}

const upvotes =
  userId &&
  (await db
    .select({ id: Vote.id })
    .from(Vote)
    .where(and(eq(Vote.postId, post.id), eq(Vote.userId, userId)))
    .limit(1));

const isUpvoted = upvotes && upvotes.length > 0;

if (post.slug && post.slug !== Astro.params.slug) {
  return Astro.redirect(`/weekly/${post.slug}`);
}

const params = {
  id: 'kqa7b3a5ol15455',
  title: post.title || '',
  desc: post.description || '',
  avatar: authorImage(post),
  handle: `@${post.attributedGitHubUser || post.attributedXUser || post.author?.githubUserName || 'anonymous'}`,
};

const queryString = new URLSearchParams(params).toString();
const ogImage = `https://dynogee.com/gen?${queryString}`;
const meta = {
  title: `${post.title} - ctxs.ai`,
  description: post.description,
  ogImage: ogImage,
};

Astro.response.headers.set('Cache-Control', 'public, max-age=3600');
---

<Layout meta={meta}>
  <div class="max-w-3xl mx-auto px-4">
    <div class="flex justify-between items-center md:border-x md:px-8 pt-6">
      <a href="/weekly">
        <Logo className="h-6 w-auto block" />
      </a>

      <!-- TODO: Add context actions with viewcount etc -->
      <!-- TODO: figure out how to handle logged out users -->
      <UpvoteButton
        postId={post.id}
        postSlug={post.slug}
        variant="header"
        client:load
        initialVoteCount={parseInt(post.voteCount)}
        isUpvotedInitial={isUpvoted}
      />
    </div>
  </div>
  <ContextView post={post} />
  <VideoGuides />
</Layout>

---
import Layout from "../../layouts/Layout.astro";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import WeeklyHeader from "@/components/weekly/WeeklyHeader.astro";
import { AccountMenu, Avatar, SignInButton } from "@/components/sidebar-utils";
import WhySubmit from "@/components/weekly/WhySubmit.astro";

const meta = {
  title: "Submit a Post - ctxs.ai",
  description: "Submit a new post to the weekly discussion",
};

const isAuthenticated = !!Astro.locals.user;
const placeholder = `Your goal is to support the user creating a Project Rules file for the Cursor IDE.

Using rules in Cursor you can control the behavior of the underlying model.
 You can think of it as instructions and/or a system prompt for LLMs.

Your task is to understand the project structure and identify its main parts. 

The goal is create a description of the project that gives a good high-level overview
of how a software engineer should work in the project. It should be concise focus on whats important.

[…]
`;
---

<Layout meta={meta}>
  <WeeklyHeader showSignInButton={false} />
  <div class="max-w-3xl mx-auto px-4 py-8">
    <div class="mb-12 text-center">
      <h1 class="text-4xl font-bold tracking-tight mb-4">
        Share your context files
      </h1>
      <p class="text-muted-foreground max-w-md mx-auto">
        Get a stable permalink to plaintext & <br /> a CLI tool to easily add it
        to a project. See <a
          class="underline"
          href="/weekly/tailwind-v4-cursor-rules-7aem3a">an example</a
        >.
      </p>
    </div>

    {
      !isAuthenticated ? (
        <div class="mb-8">
          <div class="text-center">
            <SignInButton
              client:load
              size="lg"
              label="Sign in with GitHub"
              variant="default"
            />
          </div>
        </div>
      ) : (
        <div class="relative">
          <div
            id="loading-message"
            class="hidden text-xl mb-8 flex justify-center items-center text-center absolute inset-0 bg-background"
          >
            Saving…
            <br />
            This may take a few seconds
          </div>
          <form id="post-form" class="space-y-6 max-w-xl mx-auto">
            <fieldset class="space-y-2">
              <Label htmlFor="content">Paste your Context Window</Label>
              <Textarea
                name="content"
                placeholder={placeholder}
                required
                className="w-full max-h-96 min-h-48 placeholder:text-muted-foreground/60"
              />
            </fieldset>
            <fieldset class="space-y-2">
              <Label htmlFor="credit">Give Credit</Label>
              <p class="text-sm text-muted-foreground w-3/4">
                Found this somewhere else?
                <br /> Provide a link to the source or the original author's
                social profile
              </p>
              <Input
                className="placeholder:text-muted-foreground/60"
                id="credit"
                name="credit"
                placeholder="https://x.com/martinklepsch/status/1903507215484686431"
              />
            </fieldset>
            <div class="text-center mt-8">
              <Button type="submit" size="lg" className="w-64">
                Create post
              </Button>
            </div>
          </form>
        </div>
      )
    }
    <div class="mt-28 border-t border-border">
      <WhySubmit />
    </div>

    <script>
      import { actions } from "astro:actions";
      import { navigate } from "astro:transitions/client";

      // Handle post creation
      document.addEventListener("astro:page-load", () => {
        const postForm = document.getElementById("post-form");
        postForm?.addEventListener("submit", async (e) => {
          const loadingMessage = document.getElementById("loading-message");
          loadingMessage?.classList.remove("hidden");
          // postForm?.classList.add("invisible");
          e.preventDefault();
          const formData = new FormData(e.target as HTMLFormElement);
          const content = formData.get("content") as string;
          const credit = formData.get("credit") as string;
          const { data, error } = await actions.createPost({
            content,
            credit,
          });

          if (error) {
            postForm?.classList.remove("hidden");
            loadingMessage?.classList.add("hidden");
            alert(error.message);
          } else {
            // Redirect back to weekly page
            navigate(`/weekly/${data.slug}`);
          }
        });
      });
    </script>
  </div>
</Layout>

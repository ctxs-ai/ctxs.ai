---
import Layout from "../layouts/Layout.astro";
import { Post, Vote, User } from "@/db/schema";
import { db } from "@/lib/db";
import { eq, sql, isNotNull, arrayContains } from "drizzle-orm";
import WeeklyHeader from "@/components/weekly/WeeklyHeader.astro";
import WeeklyHero from "@/components/weekly/WeeklyHero.astro";
import TagSelector from "@/components/weekly/TagSelector.astro";
import PostComponent from "@/components/weekly/Post.astro";

const selectedTag = Astro.url.searchParams.get("tag");

type PostWithVotes = {
  id: string;
  title: string;
  slug: string;
  description: string;
  content: string | null;
  createdAt: Date;
  authorId: string | null;
  attributedGitHubUser: string | null;
  voteCount: number;
  tags: string[];
  author: {
    id: string;
    name: string | null;
    image: string | null;
  } | null;
};

// Get posts with their vote counts and author info
const posts = (await db
  .select({
    id: Post.id,
    title: Post.title,
    slug: Post.slug,
    description: Post.description,
    content: Post.content,
    createdAt: Post.createdAt,
    authorId: Post.authorId,
    attributedGitHubUser: Post.attributedGitHubUser,
    voteCount: sql<number>`count(${Vote.id})`.as("vote_count"),
    tags: Post.tags,
    author: {
      id: User.id,
      name: User.name,
      image: User.image,
    },
  })
  .from(Post)
  .where(isNotNull(Post.slug))
  .where(selectedTag ? arrayContains(Post.tags, [selectedTag]) : null)
  .leftJoin(Vote, eq(Post.id, Vote.postId))
  .leftJoin(User, eq(Post.authorId, User.id))
  .groupBy(Post.id, User.id)
  .orderBy(sql`vote_count desc, created_at desc`)) as PostWithVotes[];

// Group posts by week
const postsByWeek = posts.reduce(
  (acc: Record<string, PostWithVotes[]>, post: PostWithVotes) => {
    const date = new Date(post.createdAt);
    // Get Monday of the week (subtracting days since Monday)
    const monday = new Date(date);
    monday.setDate(date.getDate() - date.getDay() + 1);
    monday.setHours(0, 0, 0, 0);

    const weekKey = monday.toISOString();
    if (!acc[weekKey]) {
      acc[weekKey] = [];
    }
    acc[weekKey].push(post);
    return acc;
  },
  {},
);

// Sort weeks in descending order
const sortedWeeks = Object.entries(postsByWeek).sort(
  (a, b) => new Date(b[0]).getTime() - new Date(a[0]).getTime(),
);

const params = {
  id: "e196lx95sb92jep",
  title: "Every week, vote on the best prompts and context windows",
};

const queryString = new URLSearchParams(params).toString();
const ogImage = `https://dynogee.com/gen?${queryString}`;

const meta = {
  title: "ctxs.ai context registry",
  description:
    "An open-source, community-curated registry of contexts for use with LLMs",
  ogImage: ogImage,
};

const allTags = posts.flatMap((post: PostWithVotes) => post.tags) as string[];
const uniqueTags = [...new Set(allTags)];
---

<Layout meta={meta}>
  <WeeklyHeader />
  <div class="max-w-2xl mx-auto px-4 py-8">
    <WeeklyHero />
    <TagSelector />

    <div class="space-y-8">
      {
        sortedWeeks.map(([weekStart, weekPosts]: [string, PostWithVotes[]]) => (
          <div>
            <h3 class="text-lg font-semibold mb-4">
              Week of{" "}
              {new Date(weekStart).toLocaleDateString("en-US", {
                month: "long",
                day: "numeric",
                year: "numeric",
              })}
            </h3>
            <div class="space-y-4">
              {weekPosts.map((post: PostWithVotes) => (
                <PostComponent post={post} />
              ))}
            </div>
          </div>
        ))
      }
    </div>
  </div>
</Layout>

---
import Layout from "../layouts/Layout.astro";
import { Post, Vote, User } from "@/db/schema";
import { db } from "@/lib/db";
import { eq, sql } from "drizzle-orm";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { ThumbsUp } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import WeeklyHeader from "@/components/weekly/WeeklyHeader.astro";
import { authClient } from "@/lib/auth-client";
import WeeklyHero from "@/components/weekly/WeeklyHero.astro";
// Get posts with their vote counts and author info
const posts = await db
  .select({
    id: Post.id,
    title: Post.title,
    content: Post.content,
    createdAt: Post.createdAt,
    authorId: Post.authorId,
    voteCount: sql<number>`count(${Vote.id})`.as("vote_count"),
    author: {
      id: User.id,
      name: User.name,
      image: User.image,
    },
  })
  .from(Post)
  .leftJoin(Vote, eq(Post.id, Vote.postId))
  .leftJoin(User, eq(Post.authorId, User.id))
  .groupBy(Post.id, User.id)
  .orderBy(sql`vote_count desc`);

const params = {
  id: "e196lx95sb92jep",
  title: "Every week, vote on the best prompts and context windows",
};

const queryString = new URLSearchParams(params).toString();
const ogImage = `https://dynogee.com/gen?${queryString}`;

const meta = {
  title: "ctxs.ai context registry",
  description:
    "An open-source, community-curated registry of contexts for use with LLMs",
  ogImage: ogImage,
};

const isLoggedIn = Astro.locals.user;
---

<Layout meta={meta}>
  <WeeklyHeader />
  <div class="max-w-3xl mx-auto px-4 py-8">
    <WeeklyHero />

    <div class="space-y-4">
      {
        posts.map((post) => (
          <div class="flex items-start gap-4 p-4 rounded-lg border bg-card">
            <div class="flex flex-col items-center gap-2">
              <Button
                variant="outline"
                size="icon"
                className="vote-button"
                data-post-id={post.id}
              >
                <ThumbsUp className="h-4 w-4" />
              </Button>
              <span class="text-sm font-medium">{post.voteCount}</span>
            </div>
            <div class="flex-1">
              <h2 class="text-xl font-semibold mb-2">{post.title}</h2>
              <p class="text-muted-foreground">{post.content}</p>
              <div class="mt-2 flex items-center gap-2 text-sm text-muted-foreground">
                {post.author && (
                  <>
                    <img
                      class="size-5 rounded-xs"
                      src={post.author?.image || undefined}
                    />
                    <span>{post.author?.name || "Anonymous"}</span>
                    <span>â€¢</span>
                  </>
                )}
                <span>
                  Posted {new Date(post.createdAt).toLocaleDateString()}
                </span>
              </div>
            </div>
          </div>
        ))
      }
    </div>
  </div>

  <script>
    import { actions } from "astro:actions";
    import { authClient } from "@/lib/auth-client";

    // Handle submit button click
    const submitButton = document.getElementById("submit-button");
    submitButton?.addEventListener("click", async () => {
      const session = await authClient.getSession();
      if (session) {
        window.location.href = "/weekly/submit";
      } else {
        await authClient.signIn.social({ provider: "github" });
      }
    });

    // Handle upvoting
    const voteButtons = document.querySelectorAll(".vote-button");
    voteButtons.forEach((button) => {
      button.addEventListener("click", async () => {
        const postId = button.getAttribute("data-post-id");
        if (!postId) return;

        const { data, error } = await actions.upvotePost({
          postId,
        });

        if (error) {
          alert(error.message);
        } else {
          // Update the vote count in the UI
          const voteCount = button.nextElementSibling;
          if (voteCount) {
            const currentCount = parseInt(voteCount.textContent || "0");
            voteCount.textContent = (currentCount + 1).toString();
          }
          button.setAttribute("disabled", "true");
          button.classList.add("text-primary", "border-primary");
        }
      });
    });
  </script>
</Layout>

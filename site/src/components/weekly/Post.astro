---
import { UpvoteButton } from "@/components/upvote-button";
import { authorImage, AuthorName } from "@/db/postHelpers";

interface Props {
  post: {
    id: string;
    title: string;
    slug: string;
    description: string;
    createdAt: Date;
    voteCount: string;
    sourceUrl: string | null;
    isUpvoted: boolean;
    author?: {
      id: string;
      name: string | null;
      image: string | null;
    };
  };
}

const { post } = Astro.props;
---

<div
  class="flex items-start gap-4 p-4 rounded-lg border bg-card hover:border-primary/40 transition-colors"
>
  <div class="flex flex-col items-center gap-2">
    <UpvoteButton
      client:load
      variant="icon"
      postId={post.id}
      isUpvotedInitial={post.isUpvoted}
      initialVoteCount={parseInt(post.voteCount)}
      postSlug={post.slug}
    />
  </div>
  <div class="flex-1">
    <a href={`/weekly/${post.slug}`}>
      <h2 class="text-2xl font-medium tracking-tight">
        {post.title}
      </h2>
      <p class="text-muted-foreground mb-2 max-w-md">
        {post.description}
      </p>
    </a>
    <div class="mt-2 flex items-center gap-2 text-sm text-muted-foreground">
      {
        post.author && (
          <>
            <img class="size-5 rounded-xs" src={authorImage(post)} />
            <AuthorName post={post} showInfo={false} />
            <span>â€¢</span>
          </>
        )
      }
      <span>
        {
          new Date(post.createdAt).toLocaleDateString("en-US", {
            weekday: "long",
            month: "long",
            day: "numeric",
          })
        }
      </span>
    </div>
  </div>
</div>

<script>
  import { actions } from "astro:actions";

  // Handle upvoting
  document.addEventListener("astro:page-load", () => {
    const voteButtons = document.querySelectorAll(".vote-button");
    voteButtons.forEach((button) => {
      button.addEventListener("click", async () => {
        const postId = button.getAttribute("data-post-id");
        if (!postId) return;

        const { data, error } = await actions.upvotePost({
          postId: parseInt(postId),
        });

        if (error) {
          alert(error.message);
        } else {
          // Update the vote count in the UI
          const voteCount = button.nextElementSibling;
          if (voteCount) {
            const currentCount = parseInt(voteCount.textContent || "0");
            voteCount.textContent = (currentCount + 1).toString();
          }
          button.setAttribute("disabled", "true");
          button.classList.add("text-primary", "border-primary");
        }
      });
    });
  });
</script>

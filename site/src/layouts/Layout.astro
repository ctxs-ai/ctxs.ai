---
import "../styles/global.css";
import "@fontsource/geist-mono";
import { ClientRouter } from "astro:transitions";
import Metadata from "@/components/Metadata.astro";
import Footer from "@/components/footer.astro";
import LoadingIndicator from "@/components/LoadingIndicator.astro";

const meta = Astro.props.meta;
---

<script is:inline>
	const getThemePreference = () => {
		// if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
		// 	return localStorage.getItem("theme");
		// }
		return window.matchMedia("(prefers-color-scheme: dark)").matches
			? "dark"
			: "light";
	};
	const isDark = getThemePreference() === "dark";
	console.log({ isDark });
	console.log(window.matchMedia("(prefers-color-scheme: dark)").matches);

	// document.documentElement.classList[isDark ? "add" : "remove"]("dark");

	if (typeof localStorage !== "undefined") {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains("dark");
			localStorage.setItem("theme", isDark ? "dark" : "light");
		});
		observer.observe(document.documentElement, {
			attributes: true,
			attributeFilter: ["class"],
		});
	}
</script>

<html transition:animate="none" lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="preconnect" href="https://avatars.ctxs.ai" />
		<Metadata
			title={meta.title}
			description={meta.description}
			ogImage={meta.ogImage}
		/>
		<ClientRouter />
	</head>
	<body>
		<LoadingIndicator color="var(--color-primary)" />
		<slot />
		<Footer />
		<script>
			// Save scroll position with throttling (every 100ms)
			const saveScrollPosition = () => {
				const key = `scrollPos_${window.location.pathname}`;
				sessionStorage.setItem(key, window.scrollY.toString());
			};

			// Add scroll listener
			window.addEventListener("scroll", saveScrollPosition);

			// On page load
			document.addEventListener("astro:after-swap", () => {
				const currentPath = window.location.pathname;
				const scrollPosKey = `scrollPos_${currentPath}`;

				// Restore scroll position if exists
				const savedPosition = sessionStorage.getItem(scrollPosKey);
				console.log({ savedPosition });
				if (savedPosition !== null) {
					window.scrollTo(0, parseInt(savedPosition, 10));
				}
				// Clean up old scroll positions
				Object.keys(sessionStorage).forEach((key) => {
					if (key.startsWith("scrollPos_") && key !== scrollPosKey) {
						sessionStorage.removeItem(key);
					}
				});
			});
		</script>

		<script defer src="https://assets.onedollarstats.com/stonks.js"></script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
	}
</style>
